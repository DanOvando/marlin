[{"path":[]},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://danovando.github.io/marlin/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://danovando.github.io/marlin/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to mar","title":"Contributing to mar","text":"outlines propose change mar. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://danovando.github.io/marlin/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to mar","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://danovando.github.io/marlin/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to mar","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://danovando.github.io/marlin/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to mar","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"DanOvando/mar\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://danovando.github.io/marlin/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to mar","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://danovando.github.io/marlin/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to mar","text":"Please note mar project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://danovando.github.io/marlin/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 RStudio Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danovando.github.io/marlin/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with marlin","title":"Getting help with marlin","text":"Thanks using marlin! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://danovando.github.io/marlin/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with marlin","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://danovando.github.io/marlin/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with marlin","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://danovando.github.io/marlin/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with marlin","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://danovando.github.io/marlin/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dan Ovando. Author, maintainer.","code":""},{"path":"https://danovando.github.io/marlin/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ovando D (2021). marlin: Simulation Ocean Fisheries. https://danovando.github.io/marlin/, https://github.com/danovando/marlin.","code":"@Manual{,   title = {marlin: Simulation of Ocean Fisheries},   author = {Dan Ovando},   year = {2021},   note = {https://danovando.github.io/marlin/, https://github.com/danovando/marlin}, }"},{"path":"https://danovando.github.io/marlin/index.html","id":"marlin","dir":"","previous_headings":"","what":"Simulation of Ocean Fisheries","title":"Simulation of Ocean Fisheries","text":"marlin package efficiently running simulations marine fauna fisheries. age-structured population model different (independent) animal types 2D system capacity multiple fishing fleets technical interactions across fleets species.","code":""},{"path":"https://danovando.github.io/marlin/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation of Ocean Fisheries","text":"can install development version GitHub using:","code":"# install.packages(\"devtools\") devtools::install_github(\"DanOvando/marlin\")"},{"path":"https://danovando.github.io/marlin/index.html","id":"naviation","dir":"","previous_headings":"","what":"Naviation","title":"Simulation of Ocean Fisheries","text":"core wrapper function located R/simmar.R. function keeps track populations fleets. actual population models found src/fish_model.cpp. Additional modules put developed","code":""},{"path":"https://danovando.github.io/marlin/index.html","id":"troubleshooting","dir":"","previous_headings":"Naviation","what":"Troubleshooting","title":"Simulation of Ocean Fisheries","text":"Make sure try install fresh R session (go “Session>Restart R” make sure) run error, first try updating R packages. …. version R lower 3.5, might want consider updating R . Updating 3.51 3.52 shouldn’t hassle. BIG WARNING THOUGH, updating say R 3.1 3.5 major update, ’ll lose installed packages process. recommend following instructions deal , even fix can take , don’t recommend major R update ’re deadline. also packages help process, specifically installR Windows updateR Mac. … Make sure select box says something adding Rtools PATH variable macOS, might issues compiler, particularly version R less 4.0.0. get error says something like clang: error: unsupported option '-fopenmp', follow instructions ’ve tried , restart computer try running bunch examples showing marlin can ","code":""},{"path":"https://danovando.github.io/marlin/index.html","id":"simple-example","dir":"","previous_headings":"","what":"Simple Example","title":"Simulation of Ocean Fisheries","text":"Let’s start simple one-fleet one-critter example illustrate various options marlin  can use process_marlin plot_marlin examine simulation","code":"library(marlin) library(tidyverse) #> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── #> ✓ ggplot2 3.3.5     ✓ purrr   0.3.4 #> ✓ tibble  3.1.5     ✓ dplyr   1.0.7 #> ✓ tidyr   1.1.4     ✓ stringr 1.4.0 #> ✓ readr   2.0.2     ✓ forcats 0.5.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> x dplyr::filter() masks stats::filter() #> x dplyr::lag()    masks stats::lag() options(dplyr.summarise.inform = FALSE) theme_set(marlin::theme_marlin())  resolution <- 10 # resolution is in squared patches, so 20 implies a 20X20 system, i.e. 400 patches   years <- 20  seasons <- 1  time_step <- 1 / seasons  steps <- years * seasons  fauna <-    list(     \"bigeye\" = create_critter(       common_name = \"bigeye tuna\",       adult_movement = 1,       adult_movement_sigma = 10,       rec_form = 3,       seasons = seasons,       fished_depletion = .25,       resolution = resolution,       steepness = 0.6,       ssb0 = 1000     )   ) #> ══  1 queries  ═══════════════ #>  #> Retrieving data for taxon 'bigeye tuna' #> ✔  Found:  bigeye+tuna[Common Name] #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0  # create a fleets object, which is a list of lists (of lists). Each fleet has one element,  # with lists for each species inside there. Price specifies the price per unit weight of that  # species for that fleet # sel_form can be one of logistic or dome   fleets <- list(   \"longline\" = create_fleet(     list(\"bigeye\" = Metier$new(         critter = fauna$bigeye,         price = 10,         sel_form = \"logistic\",         sel_start = 1,         sel_delta = .01,         catchability = 0,         p_explt = 1       )     ),     base_effort = resolution ^ 2   ) )  a <- Sys.time()  fleets <- tune_fleets(fauna, fleets, tune_type = \"depletion\")   Sys.time() - a #> Time difference of 11.39375 secs   fauna$bigeye$plot() a <- Sys.time()  sim <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - a #> Time difference of 0.2172542 secs processed_marlin <- process_marlin(sim = sim, time_step = time_step)  plot_marlin(processed_marlin) plot_marlin(processed_marlin, plot_var = \"c\") plot_marlin(processed_marlin, plot_var = \"n\", plot_type = \"length\", fauna = fauna) #> Warning in plot_marlin(processed_marlin, plot_var = \"n\", plot_type = \"length\", : #> trying to plot too many steps at once, cutting down to 10 #> dropping recruits from plot since drop_recruits = TRUE plot_marlin(processed_marlin, plot_var = \"ssb\", plot_type = \"space\") #> Warning in plot_marlin(processed_marlin, plot_var = \"ssb\", plot_type = \"space\"): #> Can only plot one time step for spatial plots, defaulting to last of the #> supplied steps"},{"path":"https://danovando.github.io/marlin/index.html","id":"simple-example-seasonal-habitat-and-movement-and-spatial-q","dir":"","previous_headings":"","what":"Simple Example: seasonal habitat and movement and spatial q","title":"Simulation of Ocean Fisheries","text":"Now let’s add different adult habitats season, different movement rates season, specified recruitment habitat, spatial dimension catchability, quarterly time steps","code":"seasons <- 4  time_step <-  1 / seasons  bigeye_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm((x ^ 2 + y ^ 2), 300, 100)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   bigeye_habitat2 <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm((x ^ .2 + y ^ .2), 100, 100)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()  bigeye_q <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   dplyr::mutate(habitat = rlnorm(resolution^2)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   fauna <-    list(     \"bigeye\" = create_critter(       common_name = \"bigeye tuna\",       seasonal_habitat = list(bigeye_habitat,bigeye_habitat2),       season_blocks = list(c(1,2),c(3,4)),      adult_movement = list(c(0,0),c(10,10)),# the mean number of patches moved by adults       adult_movement_sigma = list(c(2,2), c(.1,.1)), # standard deviation of the number of patches moved by adults       rec_form = 2,       seasons = seasons,       init_explt =  1,      explt_type = \"f\"     )   ) #> ══  1 queries  ═══════════════ #>  #> Retrieving data for taxon 'bigeye tuna' #> ✔  Found:  bigeye+tuna[Common Name] #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0  # create a fleets object, which is a list of lists (of lists). Each fleet has one element,  # with lists for each species inside there. Price specifies the price per unit weight of that  # species for that fleet # sel_form can be one of logistic or dome   fleets <- list(   \"longline\" = create_fleet(     list(\"bigeye\" = Metier$new(         critter = fauna$bigeye,         price = 10,         sel_form = \"logistic\",         sel_start = 1,         sel_delta = .01,         catchability = 1e-3,         p_explt = 1,         spatial_catchability = NA       )     ),     base_effort = resolution ^ 2   ) )  a <- Sys.time()  fleets <- tune_fleets(fauna, fleets)   Sys.time() - a #> Time difference of 3.625607 secs   fauna$bigeye$plot() a <- Sys.time()  sim2 <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - a #> Time difference of 2.359536 secs     processed_marlin <- process_marlin(sim = sim2, time_step = time_step)  plot_marlin(processed_marlin) plot_marlin(processed_marlin, plot_var = \"c\") plot_marlin(processed_marlin, plot_var = \"n\", plot_type = \"length\", fauna = fauna) #> Warning in plot_marlin(processed_marlin, plot_var = \"n\", plot_type = \"length\", : #> trying to plot too many steps at once, cutting down to 10 #> dropping recruits from plot since drop_recruits = TRUE plot_marlin(processed_marlin, plot_var = \"ssb\", plot_type = \"space\") #> Warning in plot_marlin(processed_marlin, plot_var = \"ssb\", plot_type = \"space\"): #> Can only plot one time step for spatial plots, defaulting to last of the #> supplied steps"},{"path":"https://danovando.github.io/marlin/index.html","id":"two-species-and-two-fleets-with-bells-and-whistles","dir":"","previous_headings":"","what":"Two Species and two fleets with bells and whistles","title":"Simulation of Ocean Fisheries","text":"","code":"seasons <- 4  steps <- years * seasons  time_step <- 1 / seasons # for now make up some habitat   skipjack_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   dplyr::mutate(habitat =  dnorm((x ^ 2 + y ^ 2), 20, 200)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   bigeye_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm((x ^ 2 + y ^ 2), 300, 100)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   bigeye_habitat2 <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm((x ^ .2 + y ^ .2), 100, 100)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()  a <- Sys.time()  fauna <-    list(     \"skipjack\" = create_critter(       scientific_name = \"Katsuwonus pelamis\",       seasonal_habitat = list(skipjack_habitat, skipjack_habitat), # pass habitat as lists       season_blocks = list(c(1, 2), c(3, 4)), # seasons each habitat apply to       recruit_habitat = skipjack_habitat,       adult_movement = 2,# the mean number of patches moved by adults       adult_movement_sigma = 2, # standard deviation of the number of patches moved by adults       fished_depletion = .6, # desired equilibrium depletion with fishing (1 = unfished, 0 = extinct),       rec_form = 1, # recruitment form, where 1 implies local recruitment       seasons = seasons,       init_explt = 0.2,        explt_type = \"f\"       ),     \"bigeye\" = create_critter(       common_name = \"bigeye tuna\",       seasonal_habitat = list(bigeye_habitat, bigeye_habitat2), # pass habitat as lists       season_blocks = list(c(1, 2), c(3, 4)), # seasons each habitat apply to       recruit_habitat = bigeye_habitat,       adult_movement = 3,       adult_movement_sigma = 1,       fished_depletion = .1,       rec_form = 1,       seasons = seasons,       init_explt = 0.3,        explt_type = \"f\"     )   ) #> ══  1 queries  ═══════════════ #>  #> Retrieving data for taxon 'bigeye tuna' #> ✔  Found:  bigeye+tuna[Common Name] #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 Sys.time() - a #> Time difference of 2.717977 secs  # create a fleets object, which is a list of lists (of lists). Each fleet has one element,  # with lists for each species inside there. Price specifies the price per unit weight of that  # species for that fleet # sel_form can be one of logistic or dome   fleets <- list(   \"longline\" = create_fleet(     list(        \"skipjack\" = Metier$new(         critter = fauna$skipjack,         price = 100,         # price per unit weight         sel_form = \"logistic\",         # selectivity form, one of logistic or dome         sel_start = .3,         # percentage of length at maturity that selectivity starts         sel_delta = .1,         # additional percentage of sel_start where selectivity asymptotes         catchability = .01,         # overwritten by tune_fleet but can be set manually here         p_explt = 1       ),        \"bigeye\" = Metier$new(         critter = fauna$bigeye,         price = 10,         sel_form = \"logistic\",         sel_start = .1,         sel_delta = .01,         catchability = 0,         p_explt = 1       )     ),     base_effort = resolution ^ 2   ),   \"purseseine\" = create_fleet(list(     skipjack = Metier$new(       critter = fauna$skipjack,       price = 100,       sel_form = \"logistic\",       sel_start = 0.25,       sel_delta = .1,       catchability = .01,       p_explt = 0.9     ),     bigeye = Metier$new(       critter = fauna$bigeye,       price = 100,       sel_form = \"logistic\",       sel_start = .25,       sel_delta = .5,       catchability = .01,       p_explt = 1     )   ),   base_effort = resolution ^ 2) )  a <- Sys.time()  fleets <- tune_fleets(fauna, fleets)   Sys.time() - a #> Time difference of 6.507029 secs   # run simulations  # run the simulation using marlin::simmar a <- Sys.time()  sim3 <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - a #> Time difference of 2.519429 secs # a <- Sys.time()  processed_marlin <- process_marlin(sim = sim3, time_step = time_step, keep_age = TRUE) # Sys.time() - a  plot_marlin(processed_marlin) plot_marlin(processed_marlin, plot_var = \"c\") plot_marlin(processed_marlin, plot_var = \"n\", plot_type = \"length\", fauna = fauna) #> Warning in plot_marlin(processed_marlin, plot_var = \"n\", plot_type = \"length\", : #> trying to plot too many steps at once, cutting down to 10 #> dropping recruits from plot since drop_recruits = TRUE plot_marlin(processed_marlin, plot_var = \"ssb\", plot_type = \"space\") #> Warning in plot_marlin(processed_marlin, plot_var = \"ssb\", plot_type = \"space\"): #> Can only plot one time step for spatial plots, defaulting to last of the #> supplied steps e_p_f <- map(sim3[[length(sim3)]],\"e_p_fl\") %>%     bind_rows(.id = \"critter\") %>%     pivot_longer(-critter, names_to = \"fleet\", values_to = \"effort\") %>%     group_by(critter, fleet) %>%     mutate(patch = seq_along(effort)) %>%     group_by(fleet, patch) %>%     summarise(effort = sum(effort))"},{"path":"https://danovando.github.io/marlin/index.html","id":"evaluating-mpas","dir":"","previous_headings":"","what":"Evaluating MPAs","title":"Simulation of Ocean Fisheries","text":"Now let’s compare effect MPA two species sharks live nearshore  create MPA  now apply MPA Now though, consider different scenario. tunas still slightly prefer nearshore habitat, now shortfin mako population primarily lives farther offshore. first simulate population without MPA, assess effects exact MPA new scenario.","code":"library(marlin) library(tidyverse)  theme_set(marlin::theme_marlin())  resolution <- 20 # resolution is in squared patches, so 20 implies a 20X20 system, i.e. 400 patches   seasons <- 1  years <- 50  tune_type <- \"depletion\"  steps <- years * seasons  # for now make up some habitat  yft_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  .05 * x) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()    mako_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm(x,17,5)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   # create a fauna object, which is a list of lists fauna <-    list(     \"Yellowfin Tuna\" = create_critter(       scientific_name = \"Thunnus albacares\",       seasonal_habitat = yft_habitat, # pass habitat as lists       recruit_habitat = yft_habitat,       adult_movement = 0,# the mean number of patches moved by adults       adult_movement_sigma = 4, # standard deviation of the number of patches moved by adults       fished_depletion = .4, # desired equilibrium depletion with fishing (1 = unfished, 0 = extinct),       rec_form = 1, # recruitment form, where 1 implies local recruitment       seasons = seasons,       init_explt = 0.12,        explt_type = \"f\"       ),     \"Shortfin Mako\" = create_critter(       scientific_name = \"Isurus oxyrinchus\",       seasonal_habitat = list(mako_habitat), # pass habitat as lists       recruit_habitat = mako_habitat,       adult_movement = 5,       adult_movement_sigma = 3,       fished_depletion = .3,       rec_form = 1,       burn_years = 200,       seasons = seasons,       init_explt = .12,        explt_type = \"f\",       fec_form = \"pups\",       pups = 2     )   )  fauna$`Shortfin Mako`$plot() # create a fleets object, which is a list of lists (of lists). Each fleet has one element,  # with lists for each species inside there. Price specifies the price per unit weight of that  # species for that fleet # sel_form can be one of logistic or dome  fleets <- list(\"longline\" = create_fleet(list(   `Yellowfin Tuna` = Metier$new(     critter = fauna$`Yellowfin Tuna`,     price = 100, # price per unit weight     sel_form = \"logistic\", # selectivity form, one of logistic or dome     sel_start = .3, # percentage of length at maturity that selectivity starts     sel_delta = .1, # additional percentage of sel_start where selectivity asymptotes     catchability = .01, # overwritten by tune_fleet but can be set manually here     p_explt = 1     ),   `Shortfin Mako` = Metier$new(     critter = fauna$`Shortfin Mako`,     price = 0,     sel_form = \"logistic\",     sel_start = .1,     sel_delta = .01,     catchability = 0,     p_explt = 1   )),   mpa_response = \"stay\",   base_effort = resolution^2 ))  a <- Sys.time()  fleets <- tune_fleets(fauna, fleets, tune_type = tune_type) # tunes the catchability by fleet to achieve target depletion  Sys.time() - a #> Time difference of 1.339053 mins  # run simulations  a <- Sys.time()  nearshore <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - a #> Time difference of 2.446182 secs    proc_nearshore <- process_marlin(nearshore, time_step =  fauna[[1]]$time_step) set.seed(42) #specify some MPA locations mpa_locations <- expand_grid(x = 1:resolution, y = 1:resolution) %>% mutate(mpa = x > 15 & y < 15)  mpa_locations %>%    ggplot(aes(x,y, fill = mpa)) +    geom_tile() +    scale_fill_brewer(palette = \"Accent\", direction  = -1, name = \"MPA\") +    scale_x_continuous(name = \"Lat\") +    scale_y_continuous(name = \"Lon\") a <- Sys.time()  nearshore_mpa <- simmar(   fauna = fauna,   fleets = fleets,   years = years,   mpas = list(locations = mpa_locations,               mpa_year = floor(years * .5)) )  Sys.time() - a #> Time difference of 1.492239 secs  proc_nearshore_mpa <- process_marlin(nearshore_mpa, time_step =  fauna[[1]]$time_step) mako_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm(x, 9,5)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   # create a fauna object, which is a list of lists  fauna <-    list(     \"Yellowfin Tuna\" = create_critter(       scientific_name = \"Thunnus albacares\",       seasonal_habitat = yft_habitat, # pass habitat as lists       recruit_habitat = yft_habitat,       adult_movement = 0,# the mean number of patches moved by adults       adult_movement_sigma = 4, # standard deviation of the number of patches moved by adults       fished_depletion = .4, # desired equilibrium depletion with fishing (1 = unfished, 0 = extinct),       rec_form = 1, # recruitment form, where 1 implies local recruitment       seasons = seasons,       init_explt = 0.12,        explt_type = \"f\"       ),     \"Shortfin Mako\" = create_critter(       scientific_name = \"Isurus oxyrinchus\",       seasonal_habitat = list(mako_habitat), # pass habitat as lists       recruit_habitat = mako_habitat,       adult_movement = 5,       adult_movement_sigma = 3,       fished_depletion = .3,       rec_form = 1,       burn_years = 200,       seasons = seasons,       init_explt = .12,        explt_type = \"f\",       fec_form = \"pups\",       pups = 2     )   )  fauna$`Shortfin Mako`$plot() fleets <- tune_fleets(fauna, fleets, tune_type = tune_type) # tunes the catchability by fleet to achieve target depletion  # run simulations  # run the simulation using marlin::simmar a <- Sys.time()  offshore <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - a #> Time difference of 2.905531 secs    proc_offshore <- process_marlin(offshore, time_step =  fauna[[1]]$time_step)  a <- Sys.time()  offshore_mpa_sim <- simmar(   fauna = fauna,   fleets = fleets,   years = years,   mpas = list(locations = mpa_locations,               mpa_year = floor(years * .5)) )  Sys.time() - a #> Time difference of 2.048612 secs   proc_offshore_mpa <- process_marlin(offshore_mpa_sim, time_step =  fauna[[1]]$time_step) plot_marlin(   `MPA: Sharks Offshore` = proc_offshore_mpa,   `No MPA` = proc_nearshore,   `MPA: Sharks Nearshore` = proc_nearshore_mpa,   steps_to_plot = NA,   plot_var = \"ssb\",   max_scale = FALSE ) plot_marlin(   `MPA: Sharks Offshore` = proc_offshore_mpa,   `No MPA` = proc_nearshore,   `MPA: Sharks Nearshore` = proc_nearshore_mpa,   plot_var = \"ssb\",   plot_type = \"space\",   steps_to_plot = c(years-1))"},{"path":"https://danovando.github.io/marlin/index.html","id":"defacto-mpas-through-bycatch-penalties","dir":"","previous_headings":"","what":"Defacto MPAs through bycatch penalties","title":"Simulation of Ocean Fisheries","text":"Now consider case prices shortfin mako negative creating de facto MPAs","code":"years <- 100  tune_type <- \"explt\"  # make up some habitat  yft_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  .05 * x) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   mako_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  x > 12 & y >12) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   # create a fauna object, which is a list of lists  fauna <-    list(     \"Yellowfin Tuna\" = create_critter(       scientific_name = \"Thunnus albacares\",       seasonal_habitat = list(yft_habitat),        recruit_habitat = yft_habitat,       adult_movement = 0,       adult_movement_sigma = 4,        fished_depletion = .4,        rec_form = 1,        seasons = seasons,       init_explt = 0.12,        explt_type = \"f\"     ),     \"Shortfin Mako\" = create_critter(       scientific_name = \"Isurus oxyrinchus\",       seasonal_habitat = list(mako_habitat),        recruit_habitat = mako_habitat,       adult_movement = 5,       adult_movement_sigma = 3,       fished_depletion = .3,       rec_form = 1,       burn_years = 200,       seasons = seasons,       init_explt = 0.1,        explt_type = \"f\"     )   )  # create a fleets object, accounting a negative price to shortfin makos  fleets <- list(\"longline\" = create_fleet(list(   `Yellowfin Tuna` = Metier$new(     critter = fauna$`Yellowfin Tuna`,     price = 100, # price per unit weight     sel_form = \"logistic\", # selectivity form, one of logistic or dome     sel_start = .3, # percentage of length at maturity that selectivity starts     sel_delta = .1, # additional percentage of sel_start where selectivity asymptotes     catchability = .01, # overwritten by tune_fleet but can be set manually here     p_explt = 1   ),   `Shortfin Mako` = Metier$new(     critter = fauna$`Shortfin Mako`,     price = -20000,     sel_form = \"logistic\",     sel_start = .1,     sel_delta = .01,     catchability = 0,     p_explt = 1   )),   mpa_response = \"stay\",   base_effort = resolution^2 ))  a <- Sys.time()  fleets <- tune_fleets(fauna, fleets, tune_type = tune_type) # tunes the catchability by fleet to achieve target depletion  Sys.time() - a #> Time difference of 2.026639 secs  # run simulations  # run the simulation using marlin::simmar negative_prices <- simmar(fauna = fauna,                           fleets = fleets,                           years = years)  proc_negative_prices <- process_marlin(negative_prices, time_step =  fauna[[1]]$time_step) plot_marlin(   `De-Facto MPA` = proc_negative_prices,   plot_var = \"ssb\",   plot_type = \"space\",   steps_to_plot = c(0,25,49)) #> Warning in plot_marlin(`De-Facto MPA` = proc_negative_prices, plot_var = #> \"ssb\", : Can only plot one time step for spatial plots, defaulting to last of #> the supplied steps"},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a Fish — Fish","title":"R6 Class Representing a Fish — Fish","text":"fish object life history data needed model finfish population","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a Fish — Fish","text":"Fish like swim","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a Fish — Fish","text":"Fish$new() Fish$plot() Fish$swim() Fish$clone()","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a Fish — Fish","text":"fill fish object","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Fish — Fish","text":"","code":"Fish$new(   common_name = NA,   scientific_name = NA,   linf = NA,   vbk = NA,   t0 = -0.1,   cv_len = 0.1,   length_units = \"cm\",   min_age = 0,   max_age = NA,   weight_a = NA,   weight_b = NA,   pups = 10,   weight_units = \"kg\",   fec_form = \"weight\",   fec_expo = 1,   length_50_mature = NA,   length_95_mature = NA,   delta_mature = 0.1,   age_50_mature = NA,   age_95_mature = NA,   age_mature = NA,   length_mature = NA,   m = NA,   steepness = 0.8,   r0 = 10000,   ssb0 = NA,   density_dependence_form = 1,   adult_movement = 0,   adult_movement_sigma = 4,   recruit_movement = 0,   recruit_movement_sigma = 10,   query_fishlife = T,   sigma_r = 0,   rec_ac = 0,   cores = 4,   mat_mode = \"age\",   default_wb = 2.8,   tune_weight = FALSE,   density_movement_modifier = 1,   linf_buffer = 1.2,   resolution = NA,   seasonal_habitat = list(),   season_blocks = list(),   recruit_habitat = NA,   fished_depletion = 1,   rec_form = 1,   burn_years = 50,   seasonal_hab = NA,   seasons = 1,   explt_type = \"f\",   init_explt = 0.1,   get_common_name = FALSE )"},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Fish — Fish","text":"common_name common name pups  fec_form  fec_expo exponent fecundity weight relationship, 1 = isometric > 1 hyperallometric recruit_movement_sigma  explt_type Swim Swim advances population one time step get_common_name","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Fish — Fish","text":"","code":"Fish$plot(type = 2)"},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Fish — Fish","text":"","code":"Fish$swim(   burn_steps = 0,   season = 1,   f_p_a = NULL,   last_n_p_a = NULL,   tune_unfished = 0 )"},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Fish — Fish","text":"burn_steps number steps burn period applicable season current season f_p_a matrix fishing mortality patch age last_n_p_a matrix initial numbers patch age tune_unfished boolean indicating whether tune unfished","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Fish — Fish","text":"population next time step","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a Fish — Fish","text":"objects class cloneable method.","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Fish — Fish","text":"","code":"Fish$clone(deep = FALSE)"},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Fish — Fish","text":"deep Whether make deep clone.","code":""},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a fishing fleet — Metier","title":"R6 Class Representing a fishing fleet — Metier","text":"fleet object required characteristics fishing fleet","code":""},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a fishing fleet — Metier","text":"creates fleet object spaces selectivity, mpa response, etc.","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a fishing fleet — Metier","text":"Metier$new() Metier$clone()","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a fishing fleet — Metier","text":"","code":"Metier$new(   critter = NA,   price = 10,   sel_form = \"logistic\",   sel_unit = \"p_of_mat\",   sel_start = 1,   sel_delta = 0.1,   catchability = 0.01,   spatial_catchability = NA,   p_explt = 1 )"},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a fishing fleet — Metier","text":"objects class cloneable method.","code":""},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a fishing fleet — Metier","text":"","code":"Metier$clone(deep = FALSE)"},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a fishing fleet — Metier","text":"deep Whether make deep clone.","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ref_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign References Points — assign_ref_points","title":"Assign References Points — assign_ref_points","text":"Assign References Points","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ref_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign References Points — assign_ref_points","text":"","code":"assign_ref_points(fauna, fleets)"},{"path":"https://danovando.github.io/marlin/reference/assign_ref_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign References Points — assign_ref_points","text":"fauna list critters fleets list cleets","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ref_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign References Points — assign_ref_points","text":"fauna object MSY based reference points included critter","code":""},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — bird","title":"Title — bird","text":"Title Title","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Title — bird","text":"bird$new() bird$set_hair() bird$greet() bird$clone()","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bird","text":"","code":"bird$new(name = NA, hair = NA)"},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bird","text":"","code":"bird$set_hair(val)"},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — bird","text":"val","code":""},{"path":[]},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bird","text":"","code":"bird$greet()"},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Title — bird","text":"objects class cloneable method.","code":""},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bird","text":"","code":"bird$clone(deep = FALSE)"},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — bird","text":"deep Whether make deep clone.","code":""},{"path":"https://danovando.github.io/marlin/reference/create_critter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Critter — create_critter","title":"Create Critter — create_critter","text":"Creates critter object. scientific name provided create_critter try look relevant life history FishLife","code":""},{"path":"https://danovando.github.io/marlin/reference/create_critter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Critter — create_critter","text":"","code":"create_critter(   common_name = NA,   scientific_name = NA,   get_common_name = FALSE,   critter_type = \"fish\",   seasonal_habitat = list(),   season_blocks = list(),   recruit_habitat = NA,   seasons = 1,   rec_form = 1,   fec_form = \"weight\",   adult_movement = 0,   adult_movement_sigma = 2,   recruit_movement = 0,   recruit_movement_sigma = 10,   fished_depletion = 0.4,   init_explt = 0.1,   explt_type = \"f\",   burn_years = 50,   weight_a = NA,   fec_expo = 1,   resolution = 20,   ... )"},{"path":"https://danovando.github.io/marlin/reference/create_critter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Critter — create_critter","text":"common_name  scientific_name  critter_type  seasonal_habitat  season_blocks  seasons  rec_form  adult_movement  adult_movement_sigma  fished_depletion  init_explt initial annual exploitation rate explt_type f fmsy ...  rec_habitat","code":""},{"path":"https://danovando.github.io/marlin/reference/create_critter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Critter — create_critter","text":"Critical inputs adult_movement, adult_movement_sigma, resolution","code":""},{"path":"https://danovando.github.io/marlin/reference/create_fleet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Fleet — create_fleet","title":"Create Fleet — create_fleet","text":"Creates fleet object, mostly adding selectivity age fleet species","code":""},{"path":"https://danovando.github.io/marlin/reference/create_fleet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Fleet — create_fleet","text":"","code":"create_fleet(   metiers,   base_effort = 0,   mpa_response = \"stay\",   fleet_model = \"constant effort\",   profit_sensitivity = NA,   cost_per_unit_effort = NA,   spatial_allocation = \"rpue\",   effort_cost_exponent = 1.3,   cr_ratio = 0.9 )"},{"path":"https://danovando.github.io/marlin/reference/create_fleet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Fleet — create_fleet","text":"metiers list metiers base_effort base effort fleet mpa_response one \"stay\" \"leave\" indicating response vessels used fish MPA MPA fleet_model fleet model use, one \"constant effort\" \"open access\" profit_sensitivity profit sensitivity open access model spatial_allocation spatial effort allocation strategy (ideal_free revenue) cr_ratio cost revenue ratio initial conditions (1 implies OA equilibrium, total profits = 0) cost_per_unit_effortt cost per unit effort open access model","code":""},{"path":"https://danovando.github.io/marlin/reference/create_fleet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Fleet — create_fleet","text":"fleet object","code":""},{"path":"https://danovando.github.io/marlin/reference/find_msy.html","id":null,"dir":"Reference","previous_headings":"","what":"Find MSY Referemce Points — find_msy","title":"Find MSY Referemce Points — find_msy","text":"Still early days Note mostly internal function assign_ref_points","code":""},{"path":"https://danovando.github.io/marlin/reference/find_msy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find MSY Referemce Points — find_msy","text":"","code":"find_msy(effort_mult, fauna, fleets, opt = TRUE, target_critter)  find_msy(effort_mult, fauna, fleets, opt = TRUE, target_critter)"},{"path":"https://danovando.github.io/marlin/reference/find_msy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find MSY Referemce Points — find_msy","text":"effort_mult multiplier base effort fleet (assumes fleet model already tuned) fauna list critters fleets list fleets opt TRUE = optimize, FALSE = return MSY conditions target_critter name critter find MSY ","code":""},{"path":"https://danovando.github.io/marlin/reference/find_msy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find MSY Referemce Points — find_msy","text":"MSY conditions","code":""},{"path":"https://danovando.github.io/marlin/reference/fleet_tuner.html","id":null,"dir":"Reference","previous_headings":"","what":"fleet tuner — fleet_tuner","title":"fleet tuner — fleet_tuner","text":"finds catchability (q) fleet target fished depletion achieved","code":""},{"path":"https://danovando.github.io/marlin/reference/fleet_tuner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fleet tuner — fleet_tuner","text":"","code":"fleet_tuner(qs, fauna, fleets, years = 50)"},{"path":"https://danovando.github.io/marlin/reference/fleet_tuner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fleet tuner — fleet_tuner","text":"qs  fauna  fleets  years","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/generate_length_at_age_key.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_length_to_age_key — generate_length_at_age_key","title":"generate_length_to_age_key — generate_length_at_age_key","text":"produces age length bins matrix probability length bin age","code":""},{"path":"https://danovando.github.io/marlin/reference/generate_length_at_age_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_length_to_age_key — generate_length_at_age_key","text":"","code":"generate_length_at_age_key(   min_age,   max_age,   cv,   k,   linf,   t0,   time_step = 1,   linf_buffer = 10 )"},{"path":"https://danovando.github.io/marlin/reference/generate_length_at_age_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_length_to_age_key — generate_length_at_age_key","text":"max_age","code":""},{"path":"https://danovando.github.io/marlin/reference/generate_length_at_age_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate_length_to_age_key — generate_length_at_age_key","text":"length--age key","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Traits — get_traits","title":"Get Traits — get_traits","text":"Retrieves life history traits FishLife","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Traits — get_traits","text":"","code":"get_traits(   Class = \"predictive\",   Order = \"predictive\",   Family = \"predictive\",   Genus = \"predictive\",   Species = \"predictive\",   verbose = FALSE )"},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Traits — get_traits","text":"Class Character input taxonomic class Order Character input taxonomic class Family Character input taxonomic class Genus Character input taxonomic class Species Character input taxonomic class verbose logical TRUE prints closest match, FALSE ","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Traits — get_traits","text":"dataframe mean trait values","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Traits — get_traits","text":"function returns mean un-logged life history traits closest match supplied taxonomic information.","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Traits — get_traits","text":"","code":"if (FALSE) { life_traits <- Get_traits(Genus = \"Lutjanus\", Species = \"campechanus\") }"},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"marlin pal palette — marlin_pal","title":"marlin pal palette — marlin_pal","text":"marlin pal palette","code":""},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"marlin pal palette — marlin_pal","text":"","code":"marlin_pal(palette = \"fish_scales\", reverse = FALSE, ...)"},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"marlin pal palette — marlin_pal","text":"palette  reverse  ...","code":""},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"marlin pal palette — marlin_pal","text":"color palletes","code":""},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"marlin pal palette — marlin_pal","text":"","code":"image(1:11, 9:10, as.matrix(1:11),    col=marlin_pal(\"fish_scales\")(11),   xlim = c(-4.5,12), ylim=c(0,10),   xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\")   text(-1.8, 9.5, 'marlin_pal(\"fish_scales\")', cex = 0.7) image(1:7, 7.5:8.5, as.matrix(1:7),       col=marlin_pal(\"diverging_fish\")(7),      xlim = c(-4.5,12), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 8, 'marlin_pal(\"diverging_fish\")', cex = 0.7) image(1:11, 6:7, as.matrix(1:11),       col=marlin_pal(\"lateral_lines\")(11),      xlim = c(-4.5,12), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 6.5, 'marlin_pal(\"lateral_lines\")', cex = 0.7) image(1:11, 4.5:5.5, as.matrix(1:11),       col=marlin_pal(\"dark_blues\")(11),      xlim = c(-4.5,9), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 5, 'marlin_pal(\"dark_blues\")', cex = 0.7) image(1:11, 3:4, as.matrix(1:11),       col=marlin_pal(\"sea_blues\")(11),      xlim = c(-4.5,9), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 3.5, 'marlin_pal(\"sea_blues\")', cex = 0.7) image(1:11, 1.5:2.5, as.matrix(1:11),       col=marlin_pal(\"sky_blues\")(11),      xlim = c(-4.5,9), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 2, 'marlin_pal(\"sky_blues\")', cex = 0.7) image(1:11, 0:1, as.matrix(1:11),       col=marlin_pal(\"sands\")(11),      xlim = c(-4.5,9), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 0.5, 'marlin_pal(\"sands\")', cex = 0.7)"},{"path":"https://danovando.github.io/marlin/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://danovando.github.io/marlin/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://danovando.github.io/marlin/reference/place_mpa.html","id":null,"dir":"Reference","previous_headings":"","what":"Place MPA — place_mpa","title":"Place MPA — place_mpa","text":"Locates MPAs moment based numbers arbitrary groups species","code":""},{"path":"https://danovando.github.io/marlin/reference/place_mpa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place MPA — place_mpa","text":"","code":"place_mpa(   target_fauna,   size = 0.2,   fauna,   placement_error = 0,   seed = 42,   place_randomly = FALSE )"},{"path":"https://danovando.github.io/marlin/reference/place_mpa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place MPA — place_mpa","text":"target_fauna vector critter names around base MPA size proportion available patches place MPA fauna fauna object placement_error CV log-normal error apply MPA citing seed seed random MPA stuff place_randomly TRUE place MPAs randomly weighted something","code":""},{"path":"https://danovando.github.io/marlin/reference/place_mpa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Place MPA — place_mpa","text":"data frame coordinates MPA locations","code":""},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"Plot Marlin generates time series, spatial, length composition plots marlin run","code":""},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"","code":"plot_marlin(   ...,   steps_to_plot = NA,   plot_var = \"ssb\",   plot_type = \"time\",   fauna = NULL,   drop_recruits = TRUE,   plots = \"fauna\",   max_scale = TRUE )"},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"... named unnamed outputs process_marlin steps_to_plot steps include plot plot_var primary plotting variable, one n,b,ssb plot_type plot type, one time, length, space fauna fauna object corresponding critters process_marlin outputs drop_recruits TRUE drop recruits length composition plots","code":""},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"plot","code":""},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"","code":"if (FALSE) {  plot_marlin( `MPA: Sharks Offshore` = proc_offshore_mpa, `No MPA` = proc_nearshore, `MPA: Sharks Nearshore` = proc_nearshore_mpa, )  }"},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Marlin — process_marlin","title":"Process Marlin — process_marlin","text":"tidy's arrays outputs marlin::simmar","code":""},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Marlin — process_marlin","text":"","code":"process_marlin(sim, steps_to_keep = NA, time_step = 1, keep_age = TRUE)"},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Marlin — process_marlin","text":"sim output simmar steps_to_keep steps like keep time_step time step interval, fractions year","code":""},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Marlin — process_marlin","text":"tidy dataframe population results","code":""},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Marlin — process_marlin","text":"","code":"if (FALSE) {  processed_marlin <- process_marlin(sim, steps_to_keep = 100, time_step = 0.25)  }"},{"path":"https://danovando.github.io/marlin/reference/simmar.html","id":null,"dir":"Reference","previous_headings":"","what":"simmar is the wrapper function for the marlin package — simmar","title":"simmar is the wrapper function for the marlin package — simmar","text":"passed fauna fleet objects, simmar advance population number steps","code":""},{"path":"https://danovando.github.io/marlin/reference/simmar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simmar is the wrapper function for the marlin package — simmar","text":"","code":"simmar(   fauna = list(),   fleets = list(),   mpas = list(),   years = 100,   tune_unfished = 0,   initial_conditions = NA )"},{"path":"https://danovando.github.io/marlin/reference/simmar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simmar is the wrapper function for the marlin package — simmar","text":"tune_unfished","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/theme_marlin.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 theme for marlin — theme_marlin","title":"ggplot2 theme for marlin — theme_marlin","text":"ggplot2 theme marlin","code":""},{"path":"https://danovando.github.io/marlin/reference/theme_marlin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 theme for marlin — theme_marlin","text":"","code":"theme_marlin(...)"},{"path":"https://danovando.github.io/marlin/reference/theme_marlin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 theme for marlin — theme_marlin","text":"...","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/theme_marlin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2 theme for marlin — theme_marlin","text":"","code":"ggplot(mtcars, aes(mpg)) + geom_histogram() + marlin::theme_marlin() #> Error in ggplot(mtcars, aes(mpg)): could not find function \"ggplot\""},{"path":"https://danovando.github.io/marlin/reference/tune_fleets.html","id":null,"dir":"Reference","previous_headings":"","what":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","title":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","text":"tune_fleets tunes parameters fleet model achieve desired initial conditions. note exact: post-tuning values perfectly match inputs since example tuning steps depend prior tuning step, making difficult tune everything .","code":""},{"path":"https://danovando.github.io/marlin/reference/tune_fleets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","text":"","code":"tune_fleets(fauna, fleets, years = 50, tune_type = \"explt\")"},{"path":"https://danovando.github.io/marlin/reference/tune_fleets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","text":"years","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://danovando.github.io/marlin/news/index.html","id":"marlin-0009000","dir":"Changelog","previous_headings":"","what":"marlin 0.0.0.9000","title":"marlin 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
