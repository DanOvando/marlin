[{"path":"https://danovando.github.io/marlin/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 RStudio Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danovando.github.io/marlin/articles/dynamic-habitat.html","id":"spawning-aggregations","dir":"Articles","previous_headings":"","what":"Spawning Aggregations","title":"dynamic-habitat","text":"first example, ’ll create scenario year split four seasons. simulation, bigeye tuna spend half season far “east” domain, half season concentrated spawning ground spawning occurs. added twist, can add landmasses model setting habitat value NA patches covered land. different setting habitat 0, zero value simply implies organisms don’t want live patch, land prohibits passing cells. default length habitat vectors less time steps, model treats supplied habitat list seasonal.","code":"library(marlin)  library(tidyverse)  library(gganimate)  library(ggridges)  years <- 20  resolution <-  10  seasons <- 4  steps <- years * seasons  time_step <-  1 / seasons  land <- expand_grid(x = 1:resolution, y = 1:resolution) %>%    filter(between(x,7,10) & between(y, 4,7)) %>%    mutate(land = TRUE)   h1 <-  expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm(x, resolution / 2, .02 * resolution) *  dnorm(y, resolution / 2, .02 * resolution)) %>%    mutate(habitat = habitat * (x >= 4)) %>%      left_join(land, by =c(\"x\",\"y\")) %>%      mutate(habitat = ifelse(is.na(land), habitat, NA)) %>%      select(-land)       h2 <-  expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  -.5 * x + 10) %>%    mutate(habitat = habitat * (x < 4)) %>%      left_join(land, by =c(\"x\",\"y\")) %>%      mutate(habitat = ifelse(is.na(land), habitat, NA)) %>%      select(-land)      bigeye_habitat <- h1 %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   # huh <- tidyr::pivot_longer(as.data.frame(bigeye_habitat), tidyr::everything()) #  # h1$habitat2 <- as.numeric(huh$value)  bigeye_habitat2 <- h2 %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()  bigeye_q <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   dplyr::mutate(habitat = rlnorm(resolution^2)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   recruit_habitat <- bigeye_habitat  recruit_habitat[!is.na(recruit_habitat)] <-  1  fauna <-    list(     \"bigeye\" = create_critter(       scientific_name = \"thunnus obesus\",       base_habitat = list(bigeye_habitat,bigeye_habitat2),       season_blocks = list(c(1,2),c(3,4)),       adult_diffusion = list(5, 5), # standard deviation of the number of patches moved by adults       recruit_diffusion = 10,       recruit_habitat = recruit_habitat,       density_dependence = \"global_ssb\",        seasons = seasons,       init_explt =  1,       explt_type = \"f\",       spawning_seasons = c(2,3),       sigma_r = 0,       rec_ac = 0     )   )   fleets <- list(   \"longline\" = create_fleet(     list(\"bigeye\" = Metier$new(       critter = fauna$bigeye,       price = 10,       sel_form = \"logistic\",       sel_start = 1,       sel_delta = .01,       catchability = 1e-3,       p_explt = 1,       spatial_catchability = NA     )     ),     base_effort = resolution ^ 2,     resolution = resolution   ) )   fleets <- tune_fleets(fauna, fleets)     spawning_ground_sim <- simmar(fauna = fauna,                fleets = fleets,                years = years)    processed_spawning_grounds <- process_marlin(sim = spawning_ground_sim, time_step = time_step)    spawning_agg <- processed_spawning_grounds$fauna %>%    filter(age == max(age)) %>%    group_by(step) %>%    mutate(n = n / sum(n)) %>%    ungroup() %>%    ggplot(aes(x,y,fill = n)) +    geom_tile() +    transition_time(step) +   ease_aes('linear') +   scale_fill_viridis_c(name = \"Tunas\") +    scale_x_continuous(name = \"longitude\") +    scale_y_continuous(name = \"latitude\")   animate(spawning_agg, nframes = 100, fps=2)"},{"path":"https://danovando.github.io/marlin/articles/dynamic-habitat.html","id":"range-shifts","dir":"Articles","previous_headings":"","what":"Range Shifts","title":"dynamic-habitat","text":"addition seasonal dynamics, may interested active range shifts species. mechanics work similarly seasonal dynamics, require vectors vector habitats equal either number years number steps (steps years times seasons per year). case, sill simulate habitat bigeye tuna changes time, first shifting east south north, moving around land mass.","code":"# test habitat vector -----------------------------------------------------  shifting_habitat <- vector(mode = \"list\", length = years)    for (i in 1:years){      shifting_habitat[[i]] <- expand_grid(x = 1:resolution, y = 1:resolution) %>%     mutate(habitat =  -((y - (1 + i))^2) / 10) %>%      left_join(land, by =c(\"x\",\"y\")) %>%      mutate(habitat = ifelse(is.na(land), habitat, NA)) %>%      select(-land) %>%      pivot_wider(names_from = y, values_from = habitat) %>%      select(-x) %>%      as.matrix()       }   critter_habitat <- list(bigeye = shifting_habitat)   sim_climate <- simmar(fauna = fauna,                fleets = fleets,                habitat = critter_habitat,                years = years)   processed_marlin <- process_marlin(sim = sim_climate, time_step = time_step, keep_age = FALSE)   range_shift <- processed_marlin$fauna %>%    group_by(step) %>%    mutate(n = n / sum(n)) %>%    ungroup() %>%    ggplot(aes(x,y,fill = n)) +    geom_tile() +    transition_time(step) +   ease_aes('linear') +   scale_fill_viridis_c(name = \"Tunas\") +    scale_x_continuous(name = \"longitude\") +    scale_y_continuous(name = \"latitude\")   animate(range_shift, nframes = 100, fps=2)"},{"path":"https://danovando.github.io/marlin/articles/fleet-management.html","id":"open-access","dir":"Articles","previous_headings":"","what":"Open Access","title":"fleet-management","text":"Let’s set two fleets, one open access, one constant effort. open access dynamics based around profitability fishery, require parameters, though reasonable defaults provided. open access fleet model \\[E_{t+1,f} = E_{t,f} \\times e^{\\theta log(R_{t,f} / C_{t,f})} \\] E total effort time t fleet f. \\(\\theta\\) controls responsiveness effort ratio revenues R costs C log space. value 0.1 means 1 unit increase revenue cost ratio results roughly 10% increase effort. Revenue defined \\[R_{t,f} = \\sum_{s=1}^Sp_{f,s}Catch_{f,s}\\] p price Catch catch species s caught fleet f Costs defined \\[C_{t,f} = \\sum_{p=1}^P \\gamma_f (E_{t,p,f}^{\\beta_f} + \\eta_{f,p} E_{t,p})\\] \\[\\gamma_f\\] base cost per unit effort fleet f, \\(\\beta\\) allows thec cost effort scale non-linearly, \\(\\eta\\) cost fishing patch p, allowing model account travel costs different patches. Many parameters intuitive easy set (e.g. price), others . particular, cost per unit effort parameter \\(\\gamma\\) can difficult adjust depends units effort biomass work correctly. , model works bets specifying cr_ratio rather \\(\\gamma\\). cr_ratio specifies ratio costs revenue equilibrium conditions. , value 1 means profits zero equilibrium, >1 profits negative, < 1 profits positive. function tune_fleets takes parameters finds cost parameters results desired equilibrium cr_ratio. can now run simulation examine resulting fleet dynamics","code":"fleets <- list(   \"longline\" = create_fleet(     list(\"bigeye\" = Metier$new(         critter = fauna$bigeye,         price = 10,         sel_form = \"logistic\",         sel_start = 1,         sel_delta = .01,         catchability = 0,         p_explt = 2       )     ),     base_effort = resolution ^ 2,     resolution = resolution,     responsiveness = .5,     cr_ratio = 1,     cost_per_distance = 1,     fleet_model = \"open access\") , \"handline\" = create_fleet(   list(\"bigeye\" = Metier$new(     critter = fauna$bigeye,     price = 10,     sel_form = \"logistic\",     sel_start = 1,     sel_delta = .01,     catchability = 0,     p_explt = 1   )   ),   base_effort = resolution ^ 2,   resolution = resolution,   fleet_model = \"constant effort\",   cost_per_unit_effort = 2 ))  fleets <- tune_fleets(fauna, fleets, tune_type = \"depletion\") sim <- simmar(fauna = fauna,                   fleets = fleets,                   years = years) proc_sim <- process_marlin(sim)  plot_marlin(proc_sim) proc_sim$fleets %>%    pivot_longer(contains(\"_effort\"), names_to = \"fleet2\", values_to = \"effort\") %>%    group_by(step, fleet2) %>%   summarise(effort = sum(effort)) %>%    ggplot(aes(step * time_step, effort, color = fleet2)) +    geom_line() +      scale_x_continuous(name = \"Year\")"},{"path":"https://danovando.github.io/marlin/articles/fleet-management.html","id":"open-access-and-mpas","dir":"Articles","previous_headings":"","what":"Open Access and MPAs","title":"fleet-management","text":"see effect fleet model choices, let’s examine trajectory fleet addition MPA. default constant effort reallocation dynamics model, MPA put place, total effort fishery remains reallocated inside MPA remaining fishable patches. open access model, effort reacts MPA accordance MPAs impacts fishing profits. result, MPA put place effort decreases rapidly, profits increase due spillover MPA, time effort increases new open access equilibrium zero profits MPAs achieved.","code":"set.seed(42) #specify some MPA locations mpa_locations <- expand_grid(x = 1:resolution, y = 1:resolution) %>% mutate(mpa = x > 4 & y < 6)  with_mpa <- simmar(fauna = fauna,                   fleets = fleets,                   years = years,                   manager = list(mpas = list(locations = mpa_locations,               mpa_year = floor(years * .5))))  proc_mpa_sim <- process_marlin(with_mpa)   proc_mpa_sim$fleets %>%    pivot_longer(contains(\"_effort\"), names_to = \"fleet2\", values_to = \"effort\") %>%    group_by(step, fleet2) %>%   summarise(effort = sum(effort)) %>%    ggplot(aes(step * time_step, effort, color = fleet2)) +    geom_line() +    scale_x_continuous(name = \"year\")"},{"path":"https://danovando.github.io/marlin/articles/fleet-management.html","id":"quotas","dir":"Articles","previous_headings":"","what":"Quotas","title":"fleet-management","text":"can also layer quotas onto fleet model. , impose total quota 100 tons bigeye caught across fleets. Notice quotas impose cap, requirement, catch. , early days fishery catches high, quota effect. However, later days fishery, fleets incentive catch quota, catch less allowable amount.","code":"sim_quota <- simmar(fauna = fauna,                   fleets = fleets,                   years = years,                   manager = list(quotas = list(bigeye = 15)))  proc_sim_quota <- process_marlin(sim_quota)  plot_marlin(proc_sim_quota, plot_var = \"c\", max_scale = FALSE) proc_sim_quota$fleets %>%    group_by(step, fleet) %>%    summarise(catch = sum(catch)) %>%    ggplot(aes(step * time_step, catch, color = fleet)) +    geom_line()+     scale_x_continuous(name = \"Year\") proc_sim_quota$fleets %>%    pivot_longer(contains(\"_effort\"), names_to = \"fleet2\", values_to = \"effort\") %>%    group_by(step, fleet2) %>%   summarise(effort = sum(effort)) %>%    ggplot(aes(step * time_step, effort, color = fleet2)) +    geom_line() +      scale_x_continuous(name = \"Year\")"},{"path":"https://danovando.github.io/marlin/articles/fleet-management.html","id":"effort-caps","dir":"Articles","previous_headings":"","what":"Effort Caps","title":"fleet-management","text":"Another management option set maximum amount effort per fleet. reflect regulation, reality. example, user wishes think effort terms “days fished per year” fixed number vessels, clearly limits. Users set manager = list(effort_cap = list(FLEET_NAME = EFFORT_CAP)), FLEET_NAME filled name fleet apply given total EFFORT_CAP . Note effort caps really apply fleet_model == \"open access; fleet_model == \"constant effort\" effort already capped. open access though, effort cap ensures open access dynamics might reduce total amount effort, effort never expand beyond supplied cap fleet.","code":"sim_effort <- simmar(fauna = fauna,                   fleets = fleets,                   years = years,                   manager = list(effort_cap = list(longline = 1.5 *fleets$longline$base_effort)))  proc_sim_effort <- process_marlin(sim_effort)  plot_marlin(proc_sim_effort, plot_var = \"c\", max_scale = FALSE) proc_sim_effort$fleets %>%    group_by(step, fleet) %>%    summarise(catch = sum(catch)) %>%    ggplot(aes(step * time_step, catch, color = fleet)) +    geom_line()+     scale_x_continuous(name = \"Year\") proc_sim_effort$fleets %>%    pivot_longer(contains(\"_effort\"), names_to = \"fleet2\", values_to = \"effort\") %>%    group_by(step, fleet2) %>%   summarise(effort = sum(effort)) %>%    ggplot(aes(step * time_step, effort, color = fleet2)) +    geom_line() +      scale_x_continuous(name = \"Year\")"},{"path":"https://danovando.github.io/marlin/articles/fleet-management.html","id":"seasons","dir":"Articles","previous_headings":"","what":"Seasons","title":"fleet-management","text":"can also impose closed fishing seasons apply one targeted species","code":"sim <- simmar(fauna = fauna,                   fleets = fleets,                   years = years,               manager = list(closed_seasons = list(bigeye = c(1,2))))  proc_sim <- process_marlin(sim)  plot_marlin(proc_sim, plot_var = \"c\") proc_sim$fleets %>%    pivot_longer(contains(\"_effort\"), names_to = \"fleet2\", values_to = \"effort\") %>%    group_by(step, fleet2) %>%   summarise(effort = sum(effort)) %>%    ggplot(aes(step * time_step, effort, color = fleet2)) +    geom_line() +    scale_x_continuous(name = \"Year\") +    scale_y_continuous(limits = c(0, NA))"},{"path":"https://danovando.github.io/marlin/articles/migrations.html","id":"spawning-aggregation","dir":"Articles","previous_headings":"","what":"Spawning Aggregation","title":"migrations","text":"","code":"library(marlin) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tidyr) library(ggplot2) library(gganimate) years <- 20  resolution <-  10  seasons <- 4  steps <- years * seasons  time_step <-  1 / seasons  h1 <-  expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  -((x - resolution / 2)^2 + (y - resolution / 2)^2))     h2 <-  expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  -.5 * x)     bigeye_habitat <- h1 %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   huh <- tidyr::pivot_longer(as.data.frame(bigeye_habitat), tidyr::everything())  h1$habitat2 <- as.numeric(huh$value)  bigeye_habitat2 <- h2 %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()  bigeye_q <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   dplyr::mutate(habitat = rlnorm(resolution^2)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   fauna <-    list(     \"bigeye\" = create_critter(       scientific_name = \"thunnus obesus\",       base_habitat = list(bigeye_habitat,bigeye_habitat2),       season_blocks = list(c(1,2),c(3,4)),       adult_diffusion = list(c(5,5), c(5,5)), # standard deviation of the number of patches moved by adults       recruit_diffusion = 10,       rec_form = 0,       seasons = seasons,       init_explt =  1,       explt_type = \"f\"     )   )   fleets <- list(   \"longline\" = create_fleet(     list(\"bigeye\" = Metier$new(       critter = fauna$bigeye,       price = 10,       sel_form = \"logistic\",       sel_start = 1,       sel_delta = .01,       catchability = 1e-3,       p_explt = 1,       spatial_catchability = NA     )     ),     base_effort = resolution ^ 2,     resolution = resolution   ) )   fleets <- tune_fleets(fauna, fleets)     sim2 <- simmar(fauna = fauna,                fleets = fleets,                years = years)   processed_marlin <- process_marlin(sim = sim2, time_step = time_step)   spawning_agg <- processed_marlin$fauna %>%    filter(age == max(age)) %>%    group_by(step) %>%    mutate(n = n / sum(n)) %>%    ungroup() %>%    ggplot(aes(x,y,fill = n)) +    geom_tile() +    transition_time(step) +   ease_aes('linear') +   scale_fill_viridis_c(name = \"Tunas\") +    scale_x_continuous(name = \"longitude\") +    scale_y_continuous(name = \"latitude\")   animate(spawning_agg, nframes = 100, fps=2)"},{"path":"https://danovando.github.io/marlin/articles/migrations.html","id":"range-shift","dir":"Articles","previous_headings":"","what":"Range Shift","title":"migrations","text":"","code":"# test habitat vector -----------------------------------------------------  range_shift <- vector(mode = \"list\", length = years)  for (i in 1:years){      range_shift[[i]] <- expand_grid(x = 1:resolution, y = 1:resolution) %>%     mutate(habitat =  -((y - (1 + i))^2) / 10) %>%      pivot_wider(names_from = y, values_from = habitat) %>%      select(-x) %>%      as.matrix()       }   critter_habitat <- list(bigeye = range_shift)    sim_climate <- simmar(fauna = fauna,                fleets = fleets,                habitat = critter_habitat,                years = years)   processed_marlin <- process_marlin(sim = sim_climate, time_step = time_step, keep_age = FALSE)   range_shift <- processed_marlin$fauna %>%    group_by(step) %>%    mutate(n = n / max(n)) %>%    ungroup() %>%    ggplot(aes(x,y,fill = n)) +    geom_tile() +    transition_time(step) +   ease_aes('linear') +   scale_fill_viridis_c(name = \"Tunas\") +    scale_x_continuous(name = \"longitude\") +    scale_y_continuous(name = \"latitude\")   animate(range_shift, nframes = 100, fps=2)"},{"path":"https://danovando.github.io/marlin/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dan Ovando. Author, maintainer.","code":""},{"path":"https://danovando.github.io/marlin/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ovando D (2022). marlin: Simulation Ocean Fisheries. https://danovando.github.io/marlin/, https://github.com/danovando/marlin.","code":"@Manual{,   title = {marlin: Simulation of Ocean Fisheries},   author = {Dan Ovando},   year = {2022},   note = {https://danovando.github.io/marlin/, https://github.com/danovando/marlin}, }"},{"path":"https://danovando.github.io/marlin/index.html","id":"marlin","dir":"","previous_headings":"","what":"Simulation of Ocean Fisheries","title":"Simulation of Ocean Fisheries","text":"marlin package efficiently running simulations marine fauna fisheries. can track age-structured populations multiple independent animals targeted multiple fishing fleets across two dimensional space. allows users simulate wide range life histories, movement dynamics, fishing fleet behaviors, management strategies. See examples vignettes articles tab use marlin things like simulate… - impacts displaced fishing effort across multiple species - seasonal spawning aggregations climate induced range shifts - impacts port distance fleet dynamics - optimized marine protected area network design","code":""},{"path":"https://danovando.github.io/marlin/index.html","id":"what-is-marlin-for","dir":"","previous_headings":"","what":"What is marlin for?","title":"Simulation of Ocean Fisheries","text":"marlin best suited asking rather questions. words, marlin better suited asking “might impacts proposed MPA network change fishing effort displaced rather removed?” rather “impacts proposed MPA network biodiversity 6th decimal place”. marlin structural rather statistical simulation model, meaning parameters model directly fit explain patterns observed data. Rather, users must manually adjust parameters model reflect general dynamics system interested . means “much impact hyperallometry MPA outcomes” much simpler question “catch biodiversity impacts MPA designing 17 different data-limited species rapidly changing small bay”. doable, marlin can provide general insights cases, specific style question ask, harder ensure model appropriately set . use cases envision marlin Assessing sensitivity MPA network designs key ecological economic unknowns Design dynamic ocean management strategies climate change Management strategy evaluation spatially-explicit fisheries management","code":""},{"path":"https://danovando.github.io/marlin/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation of Ocean Fisheries","text":"can install development version GitHub using:","code":"# install.packages(\"devtools\") devtools::install_github(\"DanOvando/marlin\")"},{"path":"https://danovando.github.io/marlin/index.html","id":"installation-troubleshooting","dir":"","previous_headings":"Installation","what":"Installation Troubleshooting","title":"Simulation of Ocean Fisheries","text":"Make sure try install fresh R session (go “Session>Restart R” make sure) run error, first try updating R packages. …. version R lower 4.0, might want consider updating R . … Make sure select box says something adding Rtools PATH variable macOS, might issues compiler, particularly version R less 4.0.0. get error says something like clang: error: unsupported option '-fopenmp', follow instructions ’ve tried , restart computer try running re-installing marlin. also issues compilation Apple M1 chips. get installation error related ld: library found -lgfortran, try steps resolve Install xcode via terminal: xcode-select –install. xcode already installed, uninstall first. Install gfortran 12.1 Monterey (macOS 12) using version Apple Silicon computers (computers Apple M1 chips), gfortran-ARM-12.1-Monterey.dmg. Restart computer try install marlin . work time.","code":""},{"path":"https://danovando.github.io/marlin/index.html","id":"a-caveat","dir":"","previous_headings":"","what":"A Caveat","title":"Simulation of Ocean Fisheries","text":"marlin designed fast relatively user friendly, least complexity modeling enables users . However, tool fully automated MPA design; users still need able understand core functionality model, mileage model depend greatly creativity R skills user. particular, provide wrappers organizing common outputs plots, marlin produces far outputs, designed use cases, can preemptively plan . Given marlin tracks populations fleet dynamics across ages, time steps, space, species, fleet units, outputs rather unruly. Skills wrangling list objects serve , along tidy-data manipulation. purrr really really good . need tidyverse run marlin, see make extensive use , particular dplyr, tidyr, ggplot2 purrr examples , extract useful results marlin.","code":""},{"path":"https://danovando.github.io/marlin/index.html","id":"simple-example","dir":"","previous_headings":"","what":"Simple Example","title":"Simulation of Ocean Fisheries","text":"Let’s start simple one-fleet one-critter example illustrate various options marlin. core options marlin resolution: number patches side 2D population grid. , setting resolution 10 means simulating 10x10 system, .e. 100 patches years: number years run simulation seasons: number seasons per year. 2 mean year divided two time steps, 4 mean quarterly model, 12 monthly model, etc. , marlin works specifying three list objects fauna: list object life histories different species simulated fleets: list object fleet dynamics simulated manager: list management strategies employed fauna object list individual slots every “critter” want simulate, created create_critter function. supply common scientific name, model try populate life history values species based values reported FishLife, though specific applications always check values replace local specific values needed.  fleets object list individual fishing fleets created create_fleet function. Importantly, fleet broken metiers specifying dynamics fishing fleet regards matching critter fauna object. , case longline fleet, metier bigeye tuna specifying things like price per unit weight, selectivity, p_explt. p_explt tracks relative exploitation metier total exploitation species. , one metier p_explt 1 species X, another p_explt 2 species, 50% mortality species X comes first metier (p_explt values relative, absolute). use tune_fleets function needed tune dynamics fleet achieve specific objectives. case, specified target equilibrium fished depletion 25% (meaning biomass equilibrium 25% unfished biomass). tune_fleets adjusts catchability coefficients fleet achieve desired depletion level, taking account dynamics p_explt values per metier. , run simulation passing fauna fleet options simmar function can use process_marlin plot_marlin examine simulation","code":"library(marlin) library(tidyverse) options(dplyr.summarise.inform = FALSE) theme_set(marlin::theme_marlin(base_size = 42))  resolution <- 10 # resolution is in squared patches, so 20 implies a 20X20 system, i.e. 400 patches   years <- 20  seasons <- 1  time_step <- 1 / seasons  steps <- years * seasons fauna <-    list(     \"bigeye\" = create_critter(       common_name = \"bigeye tuna\",       adult_diffusion = 10,       density_dependence = \"post_dispersal\",       seasons = seasons,       fished_depletion = .25,       resolution = resolution,       steepness = 0.6,       ssb0 = 1000     )   ) #> ══  1 queries  ═══════════════ #> ✔  Found:  bigeye+tuna[Common Name] #> ══  Results  ═════════════════ #>  #> • Total: 1  #> • Found: 1  #> • Not Found: 0  fauna$bigeye$plot() fleets <- list(   \"longline\" = create_fleet(     list(\"bigeye\" = Metier$new(         critter = fauna$bigeye,         price = 10,         sel_form = \"logistic\",         sel_start = 1,         sel_delta = .01,         catchability = 0,         p_explt = 1       )     ),     base_effort = resolution ^ 2,     resolution = resolution   ) ) fleets <- tune_fleets(fauna, fleets, tune_type = \"depletion\") start_time <- Sys.time()  example_sim <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - start_time #> Time difference of 0.1661742 secs processed_marlin <- process_marlin(sim = example_sim, time_step = time_step)  plot_marlin(processed_marlin) plot_marlin(processed_marlin, plot_var = \"c\", max_scale = FALSE) plot_marlin(processed_marlin, plot_var = \"n\", plot_type = \"length\", fauna = fauna) plot_marlin(processed_marlin, plot_var = \"ssb\", plot_type = \"space\", steps_to_plot = max(processed_marlin$fauna$step))"},{"path":"https://danovando.github.io/marlin/index.html","id":"two-species-and-two-fleets-with-bells-and-whistles","dir":"","previous_headings":"","what":"Two Species and two fleets with bells and whistles","title":"Simulation of Ocean Fisheries","text":"Now, let’s make two species two fleet example seasonal dynamics","code":"seasons <- 4  steps <- years * seasons  time_step <- 1 / seasons # for now make up some habitat   skipjack_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   dplyr::mutate(habitat =  dnorm((x ^ 2 + y ^ 2), 20, 200)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   bigeye_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm((x ^ 2 + y ^ 2), 300, 100)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   bigeye_habitat2 <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm((x ^ .2 + y ^ .2), 100, 100)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()  a <- Sys.time()  fauna <-    list(     \"skipjack\" = create_critter(       scientific_name = \"Katsuwonus pelamis\",       base_habitat = list(skipjack_habitat, skipjack_habitat), # pass habitat as lists       season_blocks = list(c(1, 2), c(3, 4)), # seasons each habitat apply to       recruit_habitat = skipjack_habitat,       adult_diffusion = 2, # standard deviation of the number of patches moved by adults       fished_depletion = .6, # desired equilibrium depletion with fishing (1 = unfished, 0 = extinct),       density_dependence = \"global_habitat\", # recruitment form, where 1 implies local recruitment       seasons = seasons,       init_explt = 0.2,        explt_type = \"f\"       ),     \"bigeye\" = create_critter(       common_name = \"bigeye tuna\",       base_habitat = list(bigeye_habitat, bigeye_habitat2), # pass habitat as lists       season_blocks = list(c(1, 2), c(3, 4)), # seasons each habitat apply to       recruit_habitat = bigeye_habitat,       adult_diffusion = 1,       fished_depletion = .1,       density_dependence = \"local_habitat\",       seasons = seasons,       init_explt = 0.3,        explt_type = \"f\"     )   ) #> ══  1 queries  ═══════════════ #> ✔  Found:  bigeye+tuna[Common Name] #> ══  Results  ═════════════════ #>  #> • Total: 1  #> • Found: 1  #> • Not Found: 0 Sys.time() - a #> Time difference of 4.705692 secs  # create a fleets object, which is a list of lists (of lists). Each fleet has one element,  # with lists for each species inside there. Price specifies the price per unit weight of that  # species for that fleet # sel_form can be one of logistic or dome   fleets <- list(   \"longline\" = create_fleet(     list(        \"skipjack\" = Metier$new(         critter = fauna$skipjack,         price = 100,         # price per unit weight         sel_form = \"logistic\",         # selectivity form, one of logistic or dome         sel_start = .3,         # percentage of length at maturity that selectivity starts         sel_delta = .1,         # additional percentage of sel_start where selectivity asymptotes         catchability = .01,         # overwritten by tune_fleet but can be set manually here         p_explt = 1       ),        \"bigeye\" = Metier$new(         critter = fauna$bigeye,         price = 10,         sel_form = \"logistic\",         sel_start = .1,         sel_delta = .01,         catchability = 0,         p_explt = 1       )     ),     base_effort = resolution ^ 2,         resolution = resolution    ),   \"purseseine\" = create_fleet(list(     skipjack = Metier$new(       critter = fauna$skipjack,       price = 100,       sel_form = \"logistic\",       sel_start = 0.25,       sel_delta = .1,       catchability = .01,       p_explt = 0.9     ),     bigeye = Metier$new(       critter = fauna$bigeye,       price = 100,       sel_form = \"logistic\",       sel_start = .25,       sel_delta = .5,       catchability = .01,       p_explt = 1     )   ),   base_effort = resolution ^ 2,    resolution = resolution ) )  a <- Sys.time()  fleets <- tune_fleets(fauna, fleets)   Sys.time() - a #> Time difference of 10.90809 secs   # run simulations  # run the simulation using marlin::simmar a <- Sys.time()  sim3 <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - a #> Time difference of 2.192549 secs # a <- Sys.time()  processed_marlin <- process_marlin(sim = sim3, time_step = time_step, keep_age = TRUE) # Sys.time() - a  plot_marlin(processed_marlin) plot_marlin(processed_marlin, plot_var = \"c\") plot_marlin(processed_marlin, plot_var = \"n\", plot_type = \"length\", fauna = fauna) plot_marlin(processed_marlin, plot_var = \"ssb\", plot_type = \"space\") e_p_f <- map(sim3[[length(sim3)]],\"e_p_fl\") %>%     bind_rows(.id = \"critter\") %>%     pivot_longer(-critter, names_to = \"fleet\", values_to = \"effort\") %>%     group_by(critter, fleet) %>%     mutate(patch = seq_along(effort)) %>%     group_by(fleet, patch) %>%     summarise(effort = sum(effort))"},{"path":"https://danovando.github.io/marlin/index.html","id":"evaluating-mpas","dir":"","previous_headings":"","what":"Evaluating MPAs","title":"Simulation of Ocean Fisheries","text":"Now let’s compare effect MPA two species: shark population yellowfin tuna population. one simulation, sharks tuna share nearshore habitat “east” simulated area. second, tunas life onshore eastern habitat, sharks live offshore. , design MPA based distribution tunas.  now design implement MPA network specifying data frame columns x,y, mpa denoting coordinates MPA patches.  now simulate impacts MPAs passing manager slot. Now though, consider different scenario. tunas still slightly prefer nearshore habitat, now shortfin mako population primarily lives farther offshore. first simulate population without MPA, assess effects exact MPA new scenario.","code":"library(marlin) library(tidyverse)  theme_set(marlin::theme_marlin())  resolution <- 20 # resolution is in squared patches, so 20 implies a 20X20 system, i.e. 400 patches   seasons <- 1  years <- 50  tune_type <- \"depletion\"  steps <- years * seasons  # for now make up some habitat  yft_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  .05 * x) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()    mako_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm(x,resolution, 5)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   # create a fauna object, which is a list of lists fauna <-    list(     \"Yellowfin Tuna\" = create_critter(       scientific_name = \"Thunnus albacares\",       base_habitat = yft_habitat, # pass habitat as lists       recruit_habitat = yft_habitat,       adult_diffusion = 4, # standard deviation of the number of patches moved by adults       fished_depletion = .4, # desired equilibrium depletion with fishing (1 = unfished, 0 = extinct),       density_dependence = \"local_habitat\", # recruitment form, where 1 implies local recruitment       seasons = seasons,       init_explt = 0.12,        explt_type = \"f\"       ),     \"Shortfin Mako\" = create_critter(       scientific_name = \"Isurus oxyrinchus\",       base_habitat = list(mako_habitat), # pass habitat as lists       recruit_habitat = mako_habitat,       adult_diffusion = 3,       fished_depletion = .3,       density_dependence = \"local_habitat\", # recruitment form, where 1 implies local recruitment       burn_years = 200,       seasons = seasons,       init_explt = .12,        explt_type = \"f\",       fec_form = \"pups\",       pups = 2     )   )  fauna$`Shortfin Mako`$plot() # create a fleets object, which is a list of lists (of lists). Each fleet has one element,  # with lists for each species inside there. Price specifies the price per unit weight of that  # species for that fleet # sel_form can be one of logistic or dome  fleets <- list(\"longline\" = create_fleet(list(   `Yellowfin Tuna` = Metier$new(     critter = fauna$`Yellowfin Tuna`,     price = 100, # price per unit weight     sel_form = \"logistic\", # selectivity form, one of logistic or dome     sel_start = .3, # percentage of length at maturity that selectivity starts     sel_delta = .1, # additional percentage of sel_start where selectivity asymptotes     catchability = .01, # overwritten by tune_fleet but can be set manually here     p_explt = 1     ),   `Shortfin Mako` = Metier$new(     critter = fauna$`Shortfin Mako`,     price = 0,     sel_form = \"logistic\",     sel_start = .1,     sel_delta = .01,     catchability = 0,     p_explt = 1   )),   mpa_response = \"stay\",   base_effort = resolution^2,   resolution = resolution ))  a <- Sys.time()  fleets <- tune_fleets(fauna, fleets, tune_type = tune_type) # tunes the catchability by fleet to achieve target depletion  Sys.time() - a #> Time difference of 1.089666 mins  # run simulations  a <- Sys.time()  nearshore <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - a #> Time difference of 1.673124 secs    proc_nearshore <- process_marlin(nearshore, time_step =  fauna[[1]]$time_step) set.seed(42) #specify some MPA locations mpa_locations <- expand_grid(x = 1:resolution, y = 1:resolution) %>% mutate(mpa = x > 15 & y < 15)  mpa_locations %>%    ggplot(aes(x,y, fill = mpa)) +    geom_tile() +    scale_fill_brewer(palette = \"Accent\", direction  = -1, name = \"MPA\") +    scale_x_continuous(name = \"Lon\") +    scale_y_continuous(name = \"Lat\") a <- Sys.time()  nearshore_mpa <- simmar(   fauna = fauna,   fleets = fleets,   years = years,   manager = list(mpas = list(locations = mpa_locations,               mpa_year = floor(years * .5))) )  Sys.time() - a #> Time difference of 1.076097 secs  proc_nearshore_mpa <- process_marlin(nearshore_mpa, time_step =  fauna[[1]]$time_step) mako_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  dnorm(x,.3 * resolution, 3)) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   # create a fauna object, which is a list of lists  fauna <-    list(     \"Yellowfin Tuna\" = create_critter(       scientific_name = \"Thunnus albacares\",       base_habitat = yft_habitat, # pass habitat as lists       recruit_habitat = yft_habitat,       adult_diffusion = 4, # standard deviation of the number of patches moved by adults       fished_depletion = .4, # desired equilibrium depletion with fishing (1 = unfished, 0 = extinct),       density_dependence = \"local_habitat\", # recruitment form, where 1 implies local recruitment       seasons = seasons,       init_explt = 0.12,        explt_type = \"f\"       ),     \"Shortfin Mako\" = create_critter(       scientific_name = \"Isurus oxyrinchus\",       base_habitat = list(mako_habitat), # pass habitat as lists       recruit_habitat = mako_habitat,       adult_diffusion = 3,       fished_depletion = .3,       density_dependence = \"local_habitat\", # recruitment form, where 1 implies local recruitment       burn_years = 200,       seasons = seasons,       init_explt = .12,        explt_type = \"f\",       fec_form = \"pups\",       pups = 2     )   )  fauna$`Shortfin Mako`$plot() fleets <- tune_fleets(fauna, fleets, tune_type = tune_type) # tunes the catchability by fleet to achieve target depletion  # run simulations  # run the simulation using marlin::simmar a <- Sys.time()  offshore <- simmar(fauna = fauna,                   fleets = fleets,                   years = years)  Sys.time() - a #> Time difference of 1.520396 secs    proc_offshore <- process_marlin(offshore, time_step =  fauna[[1]]$time_step)  a <- Sys.time()  offshore_mpa_sim <- simmar(   fauna = fauna,   fleets = fleets,   years = years,   manager = list(mpas = list(locations = mpa_locations,               mpa_year = floor(years * .5))) )  Sys.time() - a #> Time difference of 1.221539 secs   proc_offshore_mpa <- process_marlin(offshore_mpa_sim, time_step =  fauna[[1]]$time_step) plot_marlin(   `MPA: Sharks Offshore` = proc_offshore_mpa,   `No MPA: Sharks Nearshore` = proc_nearshore,   `MPA: Sharks Nearshore` = proc_nearshore_mpa,   steps_to_plot = NA,   plot_var = \"ssb\",   max_scale = FALSE ) plot_marlin(   `MPA: Sharks Offshore` = proc_offshore_mpa,   `Sharks Nearshore` = proc_nearshore,   `Sharks Offshore` = proc_offshore,   `MPA: Sharks Nearshore` = proc_nearshore_mpa,   plot_var = \"ssb\",   plot_type = \"space\",   steps_to_plot = c(years-1)) +    scale_fill_viridis_c(name = \"Spawning Biomass\", guide = guide_colorbar(barwidth = unit(13, \"lines\"), frame.colour = \"black\")) +    theme(axis.text.x = element_blank(),         axis.text.y = element_blank(),         axis.title.x = element_blank(),         axis.title.y = element_blank(),         axis.ticks = element_blank(),         strip.text = element_text(size = 9))"},{"path":"https://danovando.github.io/marlin/index.html","id":"defacto-mpas-through-bycatch-penalties","dir":"","previous_headings":"","what":"Defacto MPAs through bycatch penalties","title":"Simulation of Ocean Fisheries","text":"can also run case prices shortfin mako negative creating de facto MPAs, imposing severe negative price shortfin mako causes fishing fleet avoid area.","code":"years <- 100  tune_type <- \"explt\"  # make up some habitat  yft_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  .05 * x) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   mako_habitat <- expand_grid(x = 1:resolution, y = 1:resolution) %>%   mutate(habitat =  x > 12 & y >12) %>%    pivot_wider(names_from = y, values_from = habitat) %>%    select(-x) %>%    as.matrix()   # create a fauna object, which is a list of lists  fauna <-    list(     \"Yellowfin Tuna\" = create_critter(       scientific_name = \"Thunnus albacares\",       base_habitat = list(yft_habitat),        recruit_habitat = yft_habitat,       adult_diffusion = 4,        fished_depletion = .4,        density_dependence = \"local_habitat\", # recruitment form, where 1 implies local recruitment       seasons = seasons,       init_explt = 0.12,        explt_type = \"f\"     ),     \"Shortfin Mako\" = create_critter(       scientific_name = \"Isurus oxyrinchus\",       base_habitat = list(mako_habitat),        recruit_habitat = mako_habitat,       adult_diffusion = 3,       fished_depletion = .3,       density_dependence = \"local_habitat\", # recruitment form, where 1 implies local recruitment       burn_years = 200,       seasons = seasons,       init_explt = 0.1,        explt_type = \"f\"     )   )  # create a fleets object, accounting a negative price to shortfin makos  fleets <- list(\"longline\" = create_fleet(list(   `Yellowfin Tuna` = Metier$new(     critter = fauna$`Yellowfin Tuna`,     price = 100, # price per unit weight     sel_form = \"logistic\", # selectivity form, one of logistic or dome     sel_start = .3, # percentage of length at maturity that selectivity starts     sel_delta = .1, # additional percentage of sel_start where selectivity asymptotes     catchability = .01, # overwritten by tune_fleet but can be set manually here     p_explt = 1   ),   `Shortfin Mako` = Metier$new(     critter = fauna$`Shortfin Mako`,     price = -20000,     sel_form = \"logistic\",     sel_start = .1,     sel_delta = .01,     catchability = 0,     p_explt = 1   )),   mpa_response = \"stay\",   base_effort = resolution^2,   resolution  = resolution ))  a <- Sys.time()  fleets <- tune_fleets(fauna, fleets, tune_type = tune_type) # tunes the catchability by fleet to achieve target depletion  Sys.time() - a #> Time difference of 2.453201 secs  # run simulations  # run the simulation using marlin::simmar negative_prices <- simmar(fauna = fauna,                           fleets = fleets,                           years = years)  proc_negative_prices <- process_marlin(negative_prices, time_step =  fauna[[1]]$time_step) plot_marlin(   `De-Facto MPA` = proc_negative_prices,   plot_var = \"ssb\",   plot_type = \"space\")"},{"path":"https://danovando.github.io/marlin/index.html","id":"repo-naviation","dir":"","previous_headings":"","what":"Repo Naviation","title":"Simulation of Ocean Fisheries","text":"core wrapper function located R/simmar.R. function keeps track populations fleets. actual population models found src/fish_model.cpp. Additional modules put developed","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a Fish — Fish","title":"R6 Class Representing a Fish — Fish","text":"fish object life history data needed model finfish population","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a Fish — Fish","text":"Fish like swim","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a Fish — Fish","text":"Fish$new() Fish$plot() Fish$swim() Fish$clone()","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a Fish — Fish","text":"fill fish object","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Fish — Fish","text":"","code":"Fish$new(   common_name = NA,   scientific_name = NA,   linf = NA,   vbk = NA,   t0 = -0.1,   cv_len = 0.1,   length_units = \"cm\",   min_age = 0,   max_age = NA,   weight_a = NA,   weight_b = NA,   pups = 10,   weight_units = \"kg\",   fec_form = \"weight\",   fec_expo = 1,   length_50_mature = NA,   length_95_mature = NA,   delta_mature = 0.1,   age_50_mature = NA,   age_95_mature = NA,   age_mature = NA,   length_mature = NA,   m = NA,   steepness = 0.8,   r0 = 10000,   ssb0 = NA,   density_dependence = \"global_habitat\",   adult_diffusion = 4,   recruit_diffusion = 10,   query_fishlife = T,   sigma_r = 0,   rec_ac = 0,   cores = 4,   mat_mode = \"age\",   default_wb = 2.8,   tune_weight = FALSE,   density_movement_modifier = 1,   linf_buffer = 1.2,   resolution = NA,   base_habitat = list(),   season_blocks = list(),   recruit_habitat = NA,   fished_depletion = 1,   burn_years = 50,   seasonal_hab = NA,   seasons = 1,   explt_type = \"f\",   init_explt = 0.1,   get_common_name = FALSE,   spawning_seasons = NA,   tune_diffusion = TRUE,   taxis_to_diff_ratio = 0 )"},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Fish — Fish","text":"common_name common name fec_expo exponent fecundity weight relationship, 1 = isometric > 1 hyperallometric base_habitat  explt_type Swim Swim advances population one time step spawning_seasons  tune_diffusion TRUE tune adult_diffusion 95% adults move less adult_diffusion distance taxis_to_diff_ratio","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Fish — Fish","text":"","code":"Fish$plot(type = 2)"},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Fish — Fish","text":"","code":"Fish$swim(   burn_steps = 0,   season = 1,   f_p_a = NULL,   last_n_p_a = NULL,   adult_movement = NULL,   tune_unfished = 0,   rec_devs = NA )"},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Fish — Fish","text":"burn_steps number steps burn period applicable season current season f_p_a matrix fishing mortality patch age last_n_p_a matrix initial numbers patch age tune_unfished boolean indicating whether tune unfished","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a Fish — Fish","text":"population next time step","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a Fish — Fish","text":"objects class cloneable method.","code":""},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a Fish — Fish","text":"","code":"Fish$clone(deep = FALSE)"},{"path":"https://danovando.github.io/marlin/reference/Fish.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a Fish — Fish","text":"deep Whether make deep clone.","code":""},{"path":"https://danovando.github.io/marlin/reference/FishBase_and_RAM.html","id":null,"dir":"Reference","previous_headings":"","what":"Database of stock-recruit, population-dynamics, size, growth, maturity, and mortality parameters. Pull\nPulled from Thorson's FishLife package on 2022/03/06, as loading FishLife itself generated far too many dependencies. Will consider fix at later date — FishBase_and_RAM","title":"Database of stock-recruit, population-dynamics, size, growth, maturity, and mortality parameters. Pull\nPulled from Thorson's FishLife package on 2022/03/06, as loading FishLife itself generated far too many dependencies. Will consider fix at later date — FishBase_and_RAM","text":"Output Fit_model applied database scraped www.FishBase.org using rfishbase well RAM Legacy stock-recruit database","code":""},{"path":"https://danovando.github.io/marlin/reference/FishBase_and_RAM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Database of stock-recruit, population-dynamics, size, growth, maturity, and mortality parameters. Pull\nPulled from Thorson's FishLife package on 2022/03/06, as loading FishLife itself generated far too many dependencies. Will consider fix at later date — FishBase_and_RAM","text":"","code":"FishBase_and_RAM"},{"path":"https://danovando.github.io/marlin/reference/FishBase_and_RAM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Database of stock-recruit, population-dynamics, size, growth, maturity, and mortality parameters. Pull\nPulled from Thorson's FishLife package on 2022/03/06, as loading FishLife itself generated far too many dependencies. Will consider fix at later date — FishBase_and_RAM","text":"tagged list containing data predictions N_factors Number factors used evolution life-history model N_obsfactors Number factors used measurent-error life-history model beta_gv Predictive mean (transformed space) among traits every taxon tree Cov_gvv Covariance among traits every taxon tree Use_REML Boolean, whether REML used model ParentChild_gz Record taxonomic tree ParHat Parameter estimates predictions g_i Associates every observation level taxonomic tree Y_ij Life-history parameters FishBase Z_ik Taxonomy datum SR_obs Stock-recruit records RAM Legacy stock-recruit database StockData Auxiliary information every stock stock-recruit information","code":""},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a fishing fleet — Metier","title":"R6 Class Representing a fishing fleet — Metier","text":"fleet object required characteristics fishing fleet","code":""},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a fishing fleet — Metier","text":"creates fleet object spaces selectivity, mpa response, etc.","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a fishing fleet — Metier","text":"Metier$new() Metier$clone()","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a fishing fleet — Metier","text":"","code":"Metier$new(   critter = NA,   price = 10,   sel_form = \"logistic\",   sel_unit = \"p_of_mat\",   sel_start = 1,   sel_delta = 0.1,   catchability = 0.2,   spatial_catchability = NA,   p_explt = 1 )"},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a fishing fleet — Metier","text":"objects class cloneable method.","code":""},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a fishing fleet — Metier","text":"","code":"Metier$clone(deep = FALSE)"},{"path":"https://danovando.github.io/marlin/reference/Metier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a fishing fleet — Metier","text":"deep Whether make deep clone.","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ref_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign References Points — assign_ref_points","title":"Assign References Points — assign_ref_points","text":"Assign References Points","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ref_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign References Points — assign_ref_points","text":"","code":"assign_ref_points(fauna, fleets)"},{"path":"https://danovando.github.io/marlin/reference/assign_ref_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign References Points — assign_ref_points","text":"fauna list critters fleets list cleets","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ref_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign References Points — assign_ref_points","text":"fauna object MSY based reference points included critter","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ssbmsy.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Baseline SSBmsy — assign_ssbmsy","title":"Find Baseline SSBmsy — assign_ssbmsy","text":"assigns critter fauna object","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ssbmsy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Baseline SSBmsy — assign_ssbmsy","text":"","code":"assign_ssbmsy(fauna, sel_start = 0.01, years = 50)"},{"path":"https://danovando.github.io/marlin/reference/assign_ssbmsy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Baseline SSBmsy — assign_ssbmsy","text":"fauna fauna object sel_start selectivity multiplier length maturity years number years run things mult multiplier effort use one \"graphs\" \"optim\"","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ssbmsy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Baseline SSBmsy — assign_ssbmsy","text":"results simulation","code":""},{"path":"https://danovando.github.io/marlin/reference/assign_ssbmsy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Baseline SSBmsy — assign_ssbmsy","text":"","code":"if (FALSE) { years = 50  seasons = 4  fauna <-  list(  \"bigeye\" = create_critter(    scientific_name =  \"thunnus obesus\",    adult_diffusion = 10,    density_dependence = \"post_dispersal\",    seasons = seasons,    resolution = resolution,    age_mature = 1,    steepness = 0.9,    ssb0 = 1000  ) )  baseline_ssbmsy <- find_ssbmsy(fauna = fauna)  }"},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — bird","title":"Title — bird","text":"Title Title","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Title — bird","text":"bird$new() bird$set_hair() bird$greet() bird$clone()","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bird","text":"","code":"bird$new(name = NA, hair = NA)"},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bird","text":"","code":"bird$set_hair(val)"},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — bird","text":"val","code":""},{"path":[]},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bird","text":"","code":"bird$greet()"},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Title — bird","text":"objects class cloneable method.","code":""},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bird","text":"","code":"bird$clone(deep = FALSE)"},{"path":"https://danovando.github.io/marlin/reference/bird.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — bird","text":"deep Whether make deep clone.","code":""},{"path":"https://danovando.github.io/marlin/reference/create_critter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Critter — create_critter","title":"Create Critter — create_critter","text":"Creates critter object. scientific name provided create_critter try look relevant life history FishLife","code":""},{"path":"https://danovando.github.io/marlin/reference/create_critter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Critter — create_critter","text":"","code":"create_critter(   common_name = NA,   scientific_name = NA,   get_common_name = FALSE,   critter_type = \"fish\",   base_habitat = list(),   season_blocks = list(),   recruit_habitat = NA,   seasons = 1,   fec_form = \"weight\",   adult_diffusion = 2,   recruit_diffusion = 10,   fished_depletion = 0.4,   init_explt = 0.1,   explt_type = \"f\",   burn_years = 50,   weight_a = NA,   fec_expo = 1,   resolution = 20,   spawning_seasons = NA,   density_dependence = \"global_habitat\",   ... )"},{"path":"https://danovando.github.io/marlin/reference/create_critter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Critter — create_critter","text":"common_name  scientific_name  critter_type  base_habitat  season_blocks  seasons  fished_depletion  init_explt initial annual exploitation rate explt_type f fmsy ...  rec_habitat  adult_movement  adult_movement_sigma","code":""},{"path":"https://danovando.github.io/marlin/reference/create_critter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Critter — create_critter","text":"Critical inputs adult_movement, adult_movement_sigma, resolution","code":""},{"path":"https://danovando.github.io/marlin/reference/create_fleet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Fleet — create_fleet","title":"Create Fleet — create_fleet","text":"Creates fleet object, mostly adding selectivity age fleet species","code":""},{"path":"https://danovando.github.io/marlin/reference/create_fleet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Fleet — create_fleet","text":"","code":"create_fleet(   metiers,   mpa_response = \"stay\",   fleet_model = \"constant effort\",   responsiveness = 0.5,   cost_per_unit_effort = 1,   spatial_allocation = \"rpue\",   effort_cost_exponent = 1,   ports = NULL,   cost_per_distance = 1,   cr_ratio = 1,   resolution,   base_effort = NA )"},{"path":"https://danovando.github.io/marlin/reference/create_fleet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Fleet — create_fleet","text":"metiers list metiers mpa_response one \"stay\" \"leave\" indicating response vessels used fish MPA MPA fleet_model fleet model use, one \"constant effort\" \"open access\" spatial_allocation spatial effort allocation strategy (ideal_free revenue) cr_ratio cost revenue ratio initial conditions (1 implies OA equilibrium, total profits = 0) base_effort base effort fleet profit_sensitivity profit sensitivity open access model cost_per_unit_effortt cost per unit effort open access model","code":""},{"path":"https://danovando.github.io/marlin/reference/create_fleet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Fleet — create_fleet","text":"fleet object","code":""},{"path":"https://danovando.github.io/marlin/reference/find_ancestors.html","id":null,"dir":"Reference","previous_headings":"","what":"Find ancestors Ported fromhttps://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Find_ancestors.R — find_ancestors","title":"Find ancestors Ported fromhttps://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Find_ancestors.R — find_ancestors","text":"Find higher taxonomic levels given taxon (e.g., Class Order given Family)","code":""},{"path":"https://danovando.github.io/marlin/reference/find_ancestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find ancestors Ported fromhttps://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Find_ancestors.R — find_ancestors","text":"","code":"find_ancestors(   child_num,   Database = marlin::FishBase_and_RAM,   ParentChild_gz = Database$ParentChild_gz )"},{"path":"https://danovando.github.io/marlin/reference/find_ancestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find ancestors Ported fromhttps://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Find_ancestors.R — find_ancestors","text":"child_num row number ParentChild_gz find ancestors","code":""},{"path":"https://danovando.github.io/marlin/reference/find_ancestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find ancestors Ported fromhttps://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Find_ancestors.R — find_ancestors","text":"vector row numbers ParentChild_gz ancestors (including child_num)","code":""},{"path":"https://danovando.github.io/marlin/reference/find_msy.html","id":null,"dir":"Reference","previous_headings":"","what":"Find MSY Referemce Points — find_msy","title":"Find MSY Referemce Points — find_msy","text":"Still early days Note mostly internal function assign_ref_points","code":""},{"path":"https://danovando.github.io/marlin/reference/find_msy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find MSY Referemce Points — find_msy","text":"","code":"find_msy(effort_mult, fauna, fleets, opt = TRUE, target_critter)  find_msy(effort_mult, fauna, fleets, opt = TRUE, target_critter)"},{"path":"https://danovando.github.io/marlin/reference/find_msy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find MSY Referemce Points — find_msy","text":"effort_mult multiplier base effort fleet (assumes fleet model already tuned) fauna list critters fleets list fleets opt TRUE = optimize, FALSE = return MSY conditions target_critter name critter find MSY ","code":""},{"path":"https://danovando.github.io/marlin/reference/find_msy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find MSY Referemce Points — find_msy","text":"MSY conditions","code":""},{"path":"https://danovando.github.io/marlin/reference/fine_tune_costs.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — fine_tune_costs","title":"Title — fine_tune_costs","text":"Title","code":""},{"path":"https://danovando.github.io/marlin/reference/fine_tune_costs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — fine_tune_costs","text":"","code":"fine_tune_costs(log_cost_mult, target, fauna, fleets, years = 25, tune_type)"},{"path":"https://danovando.github.io/marlin/reference/fine_tune_costs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — fine_tune_costs","text":"log_cost_mult log cost per unit effort multiplier target target achieved fauna list fauna fleets list fleets years number years run optimization tune_type tuned ","code":""},{"path":"https://danovando.github.io/marlin/reference/fleet_tuner.html","id":null,"dir":"Reference","previous_headings":"","what":"fleet tuner — fleet_tuner","title":"fleet tuner — fleet_tuner","text":"finds catchability (q) fleet target fished depletion achieved","code":""},{"path":"https://danovando.github.io/marlin/reference/fleet_tuner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fleet tuner — fleet_tuner","text":"","code":"fleet_tuner(qs, fauna, fleets, years = 50)"},{"path":"https://danovando.github.io/marlin/reference/fleet_tuner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fleet tuner — fleet_tuner","text":"qs  fauna  fleets  years","code":""},{"path":"https://danovando.github.io/marlin/reference/generate_length_at_age_key.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_length_to_age_key — generate_length_at_age_key","title":"generate_length_to_age_key — generate_length_at_age_key","text":"produces age length bins matrix probability length bin age","code":""},{"path":"https://danovando.github.io/marlin/reference/generate_length_at_age_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_length_to_age_key — generate_length_at_age_key","text":"","code":"generate_length_at_age_key(   min_age,   max_age,   cv,   k,   linf,   t0,   time_step = 1,   linf_buffer = 10 )"},{"path":"https://danovando.github.io/marlin/reference/generate_length_at_age_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_length_to_age_key — generate_length_at_age_key","text":"max_age","code":""},{"path":"https://danovando.github.io/marlin/reference/generate_length_at_age_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate_length_to_age_key — generate_length_at_age_key","text":"length--age key","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Traits — get_traits","title":"Get Traits — get_traits","text":"Retrieves life history traits FishLife","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Traits — get_traits","text":"","code":"get_traits(   Class = \"predictive\",   Order = \"predictive\",   Family = \"predictive\",   Genus = \"predictive\",   Species = \"predictive\",   verbose = FALSE )"},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Traits — get_traits","text":"Class Character input taxonomic class Order Character input taxonomic class Family Character input taxonomic class Genus Character input taxonomic class Species Character input taxonomic class verbose logical TRUE prints closest match, FALSE ","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Traits — get_traits","text":"dataframe mean trait values","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Traits — get_traits","text":"function returns mean un-logged life history traits closest match supplied taxonomic information.","code":""},{"path":"https://danovando.github.io/marlin/reference/get_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Traits — get_traits","text":"","code":"if (FALSE) { life_traits <- Get_traits(Genus = \"Lutjanus\", Species = \"campechanus\") }"},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"marlin pal palette — marlin_pal","title":"marlin pal palette — marlin_pal","text":"marlin pal palette","code":""},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"marlin pal palette — marlin_pal","text":"","code":"marlin_pal(palette = \"fish_scales\", reverse = FALSE, ...)"},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"marlin pal palette — marlin_pal","text":"palette  reverse  ...","code":""},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"marlin pal palette — marlin_pal","text":"color palletes","code":""},{"path":"https://danovando.github.io/marlin/reference/marlin_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"marlin pal palette — marlin_pal","text":"","code":"image(1:11, 9:10, as.matrix(1:11),    col=marlin_pal(\"fish_scales\")(11),   xlim = c(-4.5,12), ylim=c(0,10),   xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\")   text(-1.8, 9.5, 'marlin_pal(\"fish_scales\")', cex = 0.7) image(1:7, 7.5:8.5, as.matrix(1:7),       col=marlin_pal(\"diverging_fish\")(7),      xlim = c(-4.5,12), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 8, 'marlin_pal(\"diverging_fish\")', cex = 0.7) image(1:11, 6:7, as.matrix(1:11),       col=marlin_pal(\"lateral_lines\")(11),      xlim = c(-4.5,12), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 6.5, 'marlin_pal(\"lateral_lines\")', cex = 0.7) image(1:11, 4.5:5.5, as.matrix(1:11),       col=marlin_pal(\"dark_blues\")(11),      xlim = c(-4.5,9), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 5, 'marlin_pal(\"dark_blues\")', cex = 0.7) image(1:11, 3:4, as.matrix(1:11),       col=marlin_pal(\"sea_blues\")(11),      xlim = c(-4.5,9), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 3.5, 'marlin_pal(\"sea_blues\")', cex = 0.7) image(1:11, 1.5:2.5, as.matrix(1:11),       col=marlin_pal(\"sky_blues\")(11),      xlim = c(-4.5,9), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 2, 'marlin_pal(\"sky_blues\")', cex = 0.7) image(1:11, 0:1, as.matrix(1:11),       col=marlin_pal(\"sands\")(11),      xlim = c(-4.5,9), ylim=c(0,10),      xlab=\"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\", add = TRUE) text(-1.8, 0.5, 'marlin_pal(\"sands\")', cex = 0.7)"},{"path":"https://danovando.github.io/marlin/reference/optimize_mpa.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize MPA network — optimize_mpa","title":"Optimize MPA network — optimize_mpa","text":"Optimize MPA network","code":""},{"path":"https://danovando.github.io/marlin/reference/optimize_mpa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize MPA network — optimize_mpa","text":"","code":"optimize_mpa(   fauna,   fleets,   starting_conditions = NA,   alpha = 0.33,   max_prop_mpa = 1,   resolution,   prop_sampled = 0.2,   max_delta = 2,   workers = 6,   bio_objective = \"max_ssb\",   econ_objective = \"yield\",   work_backwards = TRUE )"},{"path":"https://danovando.github.io/marlin/reference/optimize_mpa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize MPA network — optimize_mpa","text":"fauna fauna object fleets fleet object starting_conditions starting conditions simmar object alpha weight given conservation relative economics (range 0 1) max_prop_mpa max proportion cells place MPA resolution resolution simulated system prop_sampled proportion cells sample SIR iteration workers number workers parallel process objective one max_ssb maximize spawning stock biomass min_loss prioritize losses","code":""},{"path":"https://danovando.github.io/marlin/reference/optimize_mpa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize MPA network — optimize_mpa","text":"list results MPA optimization","code":""},{"path":"https://danovando.github.io/marlin/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://danovando.github.io/marlin/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://danovando.github.io/marlin/reference/place_mpa.html","id":null,"dir":"Reference","previous_headings":"","what":"Place MPA — place_mpa","title":"Place MPA — place_mpa","text":"Locates MPAs moment based numbers arbitrary groups species","code":""},{"path":"https://danovando.github.io/marlin/reference/place_mpa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place MPA — place_mpa","text":"","code":"place_mpa(   target_fauna,   size = 0.2,   fauna,   placement_error = 0,   seed = 42,   place_randomly = FALSE )"},{"path":"https://danovando.github.io/marlin/reference/place_mpa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place MPA — place_mpa","text":"target_fauna vector critter names around base MPA size proportion available patches place MPA fauna fauna object placement_error CV log-normal error apply MPA citing seed seed random MPA stuff place_randomly TRUE place MPAs randomly weighted something","code":""},{"path":"https://danovando.github.io/marlin/reference/place_mpa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Place MPA — place_mpa","text":"data frame coordinates MPA locations","code":""},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"Plot Marlin generates time series, spatial, length composition plots marlin run","code":""},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"","code":"plot_marlin(   ...,   steps_to_plot = NA,   plot_var = \"ssb\",   plot_type = \"time\",   fauna = NULL,   drop_recruits = TRUE,   plots = \"fauna\",   max_scale = TRUE )"},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"... named unnamed outputs process_marlin steps_to_plot steps include plot plot_var primary plotting variable, one n,b,ssb plot_type plot type, one time, length, space fauna fauna object corresponding critters process_marlin outputs drop_recruits TRUE drop recruits length composition plots","code":""},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"plot","code":""},{"path":"https://danovando.github.io/marlin/reference/plot_marlin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Marlin\ngenerates time series, spatial, or length composition plots from marlin run — plot_marlin","text":"","code":"if (FALSE) {  plot_marlin( `MPA: Sharks Offshore` = proc_offshore_mpa, `No MPA` = proc_nearshore, `MPA: Sharks Nearshore` = proc_nearshore_mpa, )  }"},{"path":"https://danovando.github.io/marlin/reference/prep_movement.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare movement matrix — prep_movement","title":"Prepare movement matrix — prep_movement","text":"Prepare movement matrix","code":""},{"path":"https://danovando.github.io/marlin/reference/prep_movement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare movement matrix — prep_movement","text":"","code":"prep_movement(multiplier, resolution)"},{"path":"https://danovando.github.io/marlin/reference/prep_movement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare movement matrix — prep_movement","text":"multiplier multiplier adjacency matrix resolution spatial resolution time_step time step question","code":""},{"path":"https://danovando.github.io/marlin/reference/prep_movement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare movement matrix — prep_movement","text":"prepared movement matrix","code":""},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Marlin — process_marlin","title":"Process Marlin — process_marlin","text":"tidy's arrays outputs marlin::simmar","code":""},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Marlin — process_marlin","text":"","code":"process_marlin(sim, steps_to_keep = NA, time_step = NA, keep_age = TRUE)"},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Marlin — process_marlin","text":"sim output simmar steps_to_keep steps like keep time_step time step interval, fractions year","code":""},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Marlin — process_marlin","text":"tidy dataframe population results","code":""},{"path":"https://danovando.github.io/marlin/reference/process_marlin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Marlin — process_marlin","text":"","code":"if (FALSE) {  processed_marlin <- process_marlin(sim, steps_to_keep = 100, time_step = 0.25)  }"},{"path":"https://danovando.github.io/marlin/reference/quota_finder.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — quota_finder","title":"Title — quota_finder","text":"Title","code":""},{"path":"https://danovando.github.io/marlin/reference/quota_finder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — quota_finder","text":"","code":"quota_finder(   fmult,   quota,   fauna,   current_season,   movement,   f_p_a,   last_n_p_a,   f_p_a_fl,   f,   rec_devs,   patches,   ages,   fleets )"},{"path":"https://danovando.github.io/marlin/reference/quota_finder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — quota_finder","text":"fmult multiplier fishing mortality quota target quota fauna fauna object current_season current season movement movement matrix f_p_a fishing mortality rate patch age last_n_p_a last numbers patch age f_p_a_fl fishing mortality rate patch age fleet","code":""},{"path":"https://danovando.github.io/marlin/reference/quota_finder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — quota_finder","text":"sum squares catch relative quota","code":""},{"path":"https://danovando.github.io/marlin/reference/search_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Search species: Ported from https://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Search_species.R — search_species","title":"Search species: Ported from https://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Search_species.R — search_species","text":"Match taxonomic inputs given row ParentChild_gz closest ancestor","code":""},{"path":"https://danovando.github.io/marlin/reference/search_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search species: Ported from https://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Search_species.R — search_species","text":"","code":"search_species(   Class = \"predictive\",   Order = \"predictive\",   Family = \"predictive\",   Genus = \"predictive\",   Species = \"predictive\",   add_ancestors = TRUE,   Database = marlin::FishBase_and_RAM,   ParentChild_gz = Database$ParentChild_gz )"},{"path":"https://danovando.github.io/marlin/reference/search_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search species: Ported from https://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Search_species.R — search_species","text":"Class Character input taxonomic class Order Character input taxonomic class Family Character input taxonomic class Genus Character input taxonomic class Species Character input taxonomic class add_ancestors Boolean whether add ancestors matching species ParentChild_gz vector providing index parent-taxon every child-taxa","code":""},{"path":"https://danovando.github.io/marlin/reference/search_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search species: Ported from https://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Search_species.R — search_species","text":"integer row numbers ParentChild_gz matching genus_species","code":""},{"path":"https://danovando.github.io/marlin/reference/search_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search species: Ported from https://github.com/James-Thorson-NOAA/FishLife/blob/main/R/Search_species.R — search_species","text":"function attempts smart match elements ParentChild_gz.  sweeps Order Species ignores taxonomic input listed \"predictive\" finds something else.  appends \"predictive\" lower taxonomic level missing, checks whether specification yields single, unique taxon.  , returns row number potentially ancestors (higher taxonomic levels)","code":""},{"path":"https://danovando.github.io/marlin/reference/simmar.html","id":null,"dir":"Reference","previous_headings":"","what":"simmar is the wrapper function for the marlin package — simmar","title":"simmar is the wrapper function for the marlin package — simmar","text":"passed fauna fleet objects, simmar advance population number steps","code":""},{"path":"https://danovando.github.io/marlin/reference/simmar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simmar is the wrapper function for the marlin package — simmar","text":"","code":"simmar(   fauna = list(),   fleets = list(),   manager = list(),   habitat = list(),   years = 100,   initial_conditions = NA,   starting_step = 0,   keep_starting_step = TRUE )"},{"path":"https://danovando.github.io/marlin/reference/simmar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simmar is the wrapper function for the marlin package — simmar","text":"fauna list fauna objects fleets list fleet objects manager list management actions habitat list habitat time years number years run simulation initial_conditions initial conditions simulation, form simmar()[final year] starting_step step start simulation , used keep track steps across multiple runs simmar keep_starting_step starting step kept (TRUE) dropped (FALSE)","code":""},{"path":"https://danovando.github.io/marlin/reference/simmar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simmar is the wrapper function for the marlin package — simmar","text":"list containing results simulation","code":""},{"path":"https://danovando.github.io/marlin/reference/theme_marlin.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 theme for marlin — theme_marlin","title":"ggplot2 theme for marlin — theme_marlin","text":"ggplot2 theme marlin","code":""},{"path":"https://danovando.github.io/marlin/reference/theme_marlin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 theme for marlin — theme_marlin","text":"","code":"theme_marlin(base_size = 14, ...)"},{"path":"https://danovando.github.io/marlin/reference/theme_marlin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 theme for marlin — theme_marlin","text":"...","code":""},{"path":"https://danovando.github.io/marlin/reference/theme_marlin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2 theme for marlin — theme_marlin","text":"","code":"ggplot(mtcars, aes(mpg)) + geom_histogram() + marlin::theme_marlin() #> Error in ggplot(mtcars, aes(mpg)): could not find function \"ggplot\""},{"path":"https://danovando.github.io/marlin/reference/tune_fleets.html","id":null,"dir":"Reference","previous_headings":"","what":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","title":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","text":"tune_fleets tunes parameters fleet model achieve desired initial conditions. note exact: post-tuning values perfectly match inputs since example tuning steps depend prior tuning step, making difficult tune everything .","code":""},{"path":"https://danovando.github.io/marlin/reference/tune_fleets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","text":"","code":"tune_fleets(   fauna,   fleets,   years = 50,   tune_type = \"explt\",   tune_costs = TRUE,   fine_tune_costs = TRUE )"},{"path":"https://danovando.github.io/marlin/reference/tune_fleets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","text":"fauna fauna object fleets fleet object years number years tune ","code":""},{"path":"https://danovando.github.io/marlin/reference/tune_fleets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tune_fleets tunes parameters of the fleet model to achieve desired initial conditions.\nnote that this is not exact: post-tuning values will not perfectly match inputs since\nfor example some tuning steps depend on prior tuning step, making it difficult to tune everything\nat once. — tune_fleets","text":"tuned fleet object","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://danovando.github.io/marlin/news/index.html","id":"marlin-0009000","dir":"Changelog","previous_headings":"","what":"marlin 0.0.0.9000","title":"marlin 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
